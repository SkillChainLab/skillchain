// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: skillchain/marketplace/proposal.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Proposal struct {
	Index                string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	JobPostingId         string `protobuf:"bytes,2,opt,name=jobPostingId,proto3" json:"jobPostingId,omitempty"`
	FreelancerAddress    string `protobuf:"bytes,3,opt,name=freelancerAddress,proto3" json:"freelancerAddress,omitempty"`
	ProposedAmount       uint64 `protobuf:"varint,4,opt,name=proposedAmount,proto3" json:"proposedAmount,omitempty"`
	ProposedCurrency     string `protobuf:"bytes,5,opt,name=proposedCurrency,proto3" json:"proposedCurrency,omitempty"`
	ProposedTimeline     string `protobuf:"bytes,6,opt,name=proposedTimeline,proto3" json:"proposedTimeline,omitempty"`
	CoverLetter          string `protobuf:"bytes,7,opt,name=coverLetter,proto3" json:"coverLetter,omitempty"`
	FreelancerReputation uint64 `protobuf:"varint,8,opt,name=freelancerReputation,proto3" json:"freelancerReputation,omitempty"`
	IsAccepted           bool   `protobuf:"varint,9,opt,name=isAccepted,proto3" json:"isAccepted,omitempty"`
	CreatedAt            int64  `protobuf:"varint,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Creator              string `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7f96c9eb6734192, []int{0}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Proposal) GetJobPostingId() string {
	if m != nil {
		return m.JobPostingId
	}
	return ""
}

func (m *Proposal) GetFreelancerAddress() string {
	if m != nil {
		return m.FreelancerAddress
	}
	return ""
}

func (m *Proposal) GetProposedAmount() uint64 {
	if m != nil {
		return m.ProposedAmount
	}
	return 0
}

func (m *Proposal) GetProposedCurrency() string {
	if m != nil {
		return m.ProposedCurrency
	}
	return ""
}

func (m *Proposal) GetProposedTimeline() string {
	if m != nil {
		return m.ProposedTimeline
	}
	return ""
}

func (m *Proposal) GetCoverLetter() string {
	if m != nil {
		return m.CoverLetter
	}
	return ""
}

func (m *Proposal) GetFreelancerReputation() uint64 {
	if m != nil {
		return m.FreelancerReputation
	}
	return 0
}

func (m *Proposal) GetIsAccepted() bool {
	if m != nil {
		return m.IsAccepted
	}
	return false
}

func (m *Proposal) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Proposal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Proposal)(nil), "skillchain.marketplace.Proposal")
}

func init() {
	proto.RegisterFile("skillchain/marketplace/proposal.proto", fileDescriptor_c7f96c9eb6734192)
}

var fileDescriptor_c7f96c9eb6734192 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x4a, 0x2b, 0x31,
	0x14, 0xc6, 0x9b, 0xdb, 0xff, 0xa7, 0x97, 0xcb, 0x35, 0x14, 0xc9, 0x42, 0xc2, 0x50, 0x50, 0x06,
	0x91, 0x16, 0x74, 0xe3, 0x76, 0x74, 0x25, 0xb8, 0x28, 0x83, 0x2b, 0x77, 0xd3, 0xcc, 0x51, 0x63,
	0xa7, 0x49, 0x48, 0x52, 0x69, 0xdf, 0xc2, 0x47, 0xf0, 0x71, 0x5c, 0x76, 0xe9, 0x52, 0xda, 0x17,
	0x11, 0x52, 0x4b, 0xa7, 0xd6, 0xe5, 0xf9, 0x7d, 0x3f, 0x0e, 0x1f, 0x7c, 0x70, 0xec, 0xc6, 0xb2,
	0x28, 0xc4, 0x53, 0x26, 0xd5, 0x60, 0x92, 0xd9, 0x31, 0x7a, 0x53, 0x64, 0x02, 0x07, 0xc6, 0x6a,
	0xa3, 0x5d, 0x56, 0xf4, 0x8d, 0xd5, 0x5e, 0xd3, 0xc3, 0xad, 0xd6, 0x2f, 0x69, 0xbd, 0xb7, 0x2a,
	0xb4, 0x86, 0xdf, 0x2a, 0xed, 0x42, 0x5d, 0xaa, 0x1c, 0x67, 0x8c, 0x44, 0x24, 0x6e, 0xa7, 0xeb,
	0x83, 0xf6, 0xe0, 0xef, 0xb3, 0x1e, 0x0d, 0xb5, 0xf3, 0x52, 0x3d, 0xde, 0xe4, 0xec, 0x4f, 0x08,
	0x77, 0x18, 0x3d, 0x83, 0x83, 0x07, 0x8b, 0x58, 0x64, 0x4a, 0xa0, 0x4d, 0xf2, 0xdc, 0xa2, 0x73,
	0xac, 0x1a, 0xc4, 0xfd, 0x80, 0x9e, 0xc0, 0xbf, 0x75, 0x3d, 0xcc, 0x93, 0x89, 0x9e, 0x2a, 0xcf,
	0x6a, 0x11, 0x89, 0x6b, 0xe9, 0x0f, 0x4a, 0x4f, 0xe1, 0xff, 0x86, 0x5c, 0x4f, 0xad, 0x45, 0x25,
	0xe6, 0xac, 0x1e, 0x9e, 0xee, 0xf1, 0xb2, 0x7b, 0x27, 0x27, 0x58, 0x48, 0x85, 0xac, 0xb1, 0xeb,
	0x6e, 0x38, 0x8d, 0xa0, 0x23, 0xf4, 0x0b, 0xda, 0x5b, 0xf4, 0x1e, 0x2d, 0x6b, 0x06, 0xad, 0x8c,
	0xe8, 0x39, 0x74, 0xb7, 0xb5, 0x53, 0x34, 0x53, 0x9f, 0x79, 0xa9, 0x15, 0x6b, 0x85, 0x9e, 0xbf,
	0x66, 0x94, 0x03, 0x48, 0x97, 0x08, 0x81, 0xc6, 0x63, 0xce, 0xda, 0x11, 0x89, 0x5b, 0x69, 0x89,
	0xd0, 0x23, 0x68, 0x0b, 0x8b, 0x99, 0xc7, 0x3c, 0xf1, 0x0c, 0x22, 0x12, 0x57, 0xd3, 0x2d, 0xa0,
	0x0c, 0x9a, 0xe1, 0xd0, 0x96, 0x75, 0x42, 0x9f, 0xcd, 0x79, 0x75, 0xf9, 0xbe, 0xe4, 0x64, 0xb1,
	0xe4, 0xe4, 0x73, 0xc9, 0xc9, 0xeb, 0x8a, 0x57, 0x16, 0x2b, 0x5e, 0xf9, 0x58, 0xf1, 0xca, 0x3d,
	0x2f, 0x6d, 0x3f, 0xdb, 0x59, 0xdf, 0xcf, 0x0d, 0xba, 0x51, 0x23, 0x6c, 0x7f, 0xf1, 0x15, 0x00,
	0x00, 0xff, 0xff, 0x6a, 0x4f, 0x40, 0x86, 0x24, 0x02, 0x00, 0x00,
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x5a
	}
	if m.CreatedAt != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x50
	}
	if m.IsAccepted {
		i--
		if m.IsAccepted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.FreelancerReputation != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.FreelancerReputation))
		i--
		dAtA[i] = 0x40
	}
	if len(m.CoverLetter) > 0 {
		i -= len(m.CoverLetter)
		copy(dAtA[i:], m.CoverLetter)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.CoverLetter)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ProposedTimeline) > 0 {
		i -= len(m.ProposedTimeline)
		copy(dAtA[i:], m.ProposedTimeline)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ProposedTimeline)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProposedCurrency) > 0 {
		i -= len(m.ProposedCurrency)
		copy(dAtA[i:], m.ProposedCurrency)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ProposedCurrency)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ProposedAmount != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.ProposedAmount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.FreelancerAddress) > 0 {
		i -= len(m.FreelancerAddress)
		copy(dAtA[i:], m.FreelancerAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.FreelancerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobPostingId) > 0 {
		i -= len(m.JobPostingId)
		copy(dAtA[i:], m.JobPostingId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.JobPostingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.JobPostingId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.FreelancerAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.ProposedAmount != 0 {
		n += 1 + sovProposal(uint64(m.ProposedAmount))
	}
	l = len(m.ProposedCurrency)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ProposedTimeline)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.CoverLetter)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.FreelancerReputation != 0 {
		n += 1 + sovProposal(uint64(m.FreelancerReputation))
	}
	if m.IsAccepted {
		n += 2
	}
	if m.CreatedAt != 0 {
		n += 1 + sovProposal(uint64(m.CreatedAt))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobPostingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobPostingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreelancerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FreelancerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedAmount", wireType)
			}
			m.ProposedAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposedAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposedCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedTimeline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposedTimeline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLetter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLetter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreelancerReputation", wireType)
			}
			m.FreelancerReputation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreelancerReputation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAccepted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAccepted = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
