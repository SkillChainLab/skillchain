// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: skillchain/marketplace/project.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Project struct {
	Index             string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	JobPostingId      string `protobuf:"bytes,2,opt,name=jobPostingId,proto3" json:"jobPostingId,omitempty"`
	ProposalId        string `protobuf:"bytes,3,opt,name=proposalId,proto3" json:"proposalId,omitempty"`
	ClientAddress     string `protobuf:"bytes,4,opt,name=clientAddress,proto3" json:"clientAddress,omitempty"`
	FreelancerAddress string `protobuf:"bytes,5,opt,name=freelancerAddress,proto3" json:"freelancerAddress,omitempty"`
	TotalAmount       uint64 `protobuf:"varint,6,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
	PaidAmount        uint64 `protobuf:"varint,7,opt,name=paidAmount,proto3" json:"paidAmount,omitempty"`
	EscrowAmount      uint64 `protobuf:"varint,8,opt,name=escrowAmount,proto3" json:"escrowAmount,omitempty"`
	Status            string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	StartDate         int64  `protobuf:"varint,10,opt,name=startDate,proto3" json:"startDate,omitempty"`
	ExpectedEndDate   int64  `protobuf:"varint,11,opt,name=expectedEndDate,proto3" json:"expectedEndDate,omitempty"`
	ActualEndDate     int64  `protobuf:"varint,12,opt,name=actualEndDate,proto3" json:"actualEndDate,omitempty"`
	Creator           string `protobuf:"bytes,13,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_03cc72a4b09fff1a, []int{0}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return m.Size()
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Project) GetJobPostingId() string {
	if m != nil {
		return m.JobPostingId
	}
	return ""
}

func (m *Project) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

func (m *Project) GetClientAddress() string {
	if m != nil {
		return m.ClientAddress
	}
	return ""
}

func (m *Project) GetFreelancerAddress() string {
	if m != nil {
		return m.FreelancerAddress
	}
	return ""
}

func (m *Project) GetTotalAmount() uint64 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

func (m *Project) GetPaidAmount() uint64 {
	if m != nil {
		return m.PaidAmount
	}
	return 0
}

func (m *Project) GetEscrowAmount() uint64 {
	if m != nil {
		return m.EscrowAmount
	}
	return 0
}

func (m *Project) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Project) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *Project) GetExpectedEndDate() int64 {
	if m != nil {
		return m.ExpectedEndDate
	}
	return 0
}

func (m *Project) GetActualEndDate() int64 {
	if m != nil {
		return m.ActualEndDate
	}
	return 0
}

func (m *Project) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Project)(nil), "skillchain.marketplace.Project")
}

func init() {
	proto.RegisterFile("skillchain/marketplace/project.proto", fileDescriptor_03cc72a4b09fff1a)
}

var fileDescriptor_03cc72a4b09fff1a = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xd2, 0xbf, 0x4f, 0x02, 0x31,
	0x14, 0xc0, 0x71, 0x4e, 0x7e, 0x49, 0x81, 0x18, 0x1b, 0x43, 0x3a, 0x98, 0xe6, 0x42, 0x18, 0x6e,
	0x30, 0x30, 0xb8, 0xb8, 0x62, 0x74, 0x60, 0x23, 0x8c, 0x6e, 0xa5, 0x7d, 0xea, 0x41, 0xb9, 0x36,
	0xed, 0x23, 0xe2, 0x7f, 0xe1, 0x3f, 0xe4, 0xee, 0xc8, 0xe8, 0x68, 0xe0, 0x1f, 0x31, 0x14, 0x08,
	0x77, 0x3a, 0xbe, 0x6f, 0x3f, 0xc3, 0xbb, 0xcb, 0x23, 0x3d, 0x3f, 0x4f, 0xb5, 0x96, 0xaf, 0x22,
	0xcd, 0x06, 0x0b, 0xe1, 0xe6, 0x80, 0x56, 0x0b, 0x09, 0x03, 0xeb, 0xcc, 0x0c, 0x24, 0xf6, 0xad,
	0x33, 0x68, 0x68, 0xe7, 0xa4, 0xfa, 0x39, 0xd5, 0xfd, 0x2c, 0x93, 0xfa, 0x78, 0x2f, 0xe9, 0x15,
	0xa9, 0xa6, 0x99, 0x82, 0x15, 0x8b, 0xe2, 0x28, 0x69, 0x4c, 0xf6, 0x03, 0xed, 0x92, 0xd6, 0xcc,
	0x4c, 0xc7, 0xc6, 0x63, 0x9a, 0xbd, 0x8c, 0x14, 0x3b, 0x0b, 0x8f, 0x85, 0x46, 0x39, 0x21, 0xd6,
	0x19, 0x6b, 0xbc, 0xd0, 0x23, 0xc5, 0xca, 0x41, 0xe4, 0x0a, 0xed, 0x91, 0xb6, 0xd4, 0x29, 0x64,
	0x38, 0x54, 0xca, 0x81, 0xf7, 0xac, 0x12, 0x48, 0x31, 0xd2, 0x1b, 0x72, 0xf9, 0xec, 0x00, 0xb4,
	0xc8, 0x24, 0xb8, 0xa3, 0xac, 0x06, 0xf9, 0xff, 0x81, 0xc6, 0xa4, 0x89, 0x06, 0x85, 0x1e, 0x2e,
	0xcc, 0x32, 0x43, 0x56, 0x8b, 0xa3, 0xa4, 0x32, 0xc9, 0xa7, 0xb0, 0x95, 0x48, 0xd5, 0x01, 0xd4,
	0x03, 0xc8, 0x95, 0xdd, 0x97, 0x81, 0x97, 0xce, 0xbc, 0x1d, 0xc4, 0x79, 0x10, 0x85, 0x46, 0x3b,
	0xa4, 0xe6, 0x51, 0xe0, 0xd2, 0xb3, 0x46, 0x58, 0xe4, 0x30, 0xd1, 0x6b, 0xd2, 0xf0, 0x28, 0x1c,
	0x3e, 0x08, 0x04, 0x46, 0xe2, 0x28, 0x29, 0x4f, 0x4e, 0x81, 0x26, 0xe4, 0x02, 0x56, 0x16, 0x24,
	0x82, 0x7a, 0xcc, 0x54, 0x30, 0xcd, 0x60, 0xfe, 0xe6, 0xdd, 0x9f, 0x11, 0x12, 0x97, 0x42, 0x1f,
	0x5d, 0x2b, 0xb8, 0x62, 0xa4, 0x8c, 0xd4, 0xa5, 0x03, 0x81, 0xc6, 0xb1, 0x76, 0x58, 0xe3, 0x38,
	0xde, 0xdf, 0x7d, 0x6d, 0x78, 0xb4, 0xde, 0xf0, 0xe8, 0x67, 0xc3, 0xa3, 0x8f, 0x2d, 0x2f, 0xad,
	0xb7, 0xbc, 0xf4, 0xbd, 0xe5, 0xa5, 0x27, 0x9e, 0xbb, 0x8b, 0x55, 0xe1, 0x32, 0xf0, 0xdd, 0x82,
	0x9f, 0xd6, 0xc2, 0x61, 0xdc, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x82, 0xf7, 0x3f, 0x8d, 0x40,
	0x02, 0x00, 0x00,
}

func (m *Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintProject(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x6a
	}
	if m.ActualEndDate != 0 {
		i = encodeVarintProject(dAtA, i, uint64(m.ActualEndDate))
		i--
		dAtA[i] = 0x60
	}
	if m.ExpectedEndDate != 0 {
		i = encodeVarintProject(dAtA, i, uint64(m.ExpectedEndDate))
		i--
		dAtA[i] = 0x58
	}
	if m.StartDate != 0 {
		i = encodeVarintProject(dAtA, i, uint64(m.StartDate))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintProject(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if m.EscrowAmount != 0 {
		i = encodeVarintProject(dAtA, i, uint64(m.EscrowAmount))
		i--
		dAtA[i] = 0x40
	}
	if m.PaidAmount != 0 {
		i = encodeVarintProject(dAtA, i, uint64(m.PaidAmount))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalAmount != 0 {
		i = encodeVarintProject(dAtA, i, uint64(m.TotalAmount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.FreelancerAddress) > 0 {
		i -= len(m.FreelancerAddress)
		copy(dAtA[i:], m.FreelancerAddress)
		i = encodeVarintProject(dAtA, i, uint64(len(m.FreelancerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClientAddress) > 0 {
		i -= len(m.ClientAddress)
		copy(dAtA[i:], m.ClientAddress)
		i = encodeVarintProject(dAtA, i, uint64(len(m.ClientAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintProject(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobPostingId) > 0 {
		i -= len(m.JobPostingId)
		copy(dAtA[i:], m.JobPostingId)
		i = encodeVarintProject(dAtA, i, uint64(len(m.JobPostingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintProject(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProject(dAtA []byte, offset int, v uint64) int {
	offset -= sovProject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.JobPostingId)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.ClientAddress)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.FreelancerAddress)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	if m.TotalAmount != 0 {
		n += 1 + sovProject(uint64(m.TotalAmount))
	}
	if m.PaidAmount != 0 {
		n += 1 + sovProject(uint64(m.PaidAmount))
	}
	if m.EscrowAmount != 0 {
		n += 1 + sovProject(uint64(m.EscrowAmount))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	if m.StartDate != 0 {
		n += 1 + sovProject(uint64(m.StartDate))
	}
	if m.ExpectedEndDate != 0 {
		n += 1 + sovProject(uint64(m.ExpectedEndDate))
	}
	if m.ActualEndDate != 0 {
		n += 1 + sovProject(uint64(m.ActualEndDate))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	return n
}

func sovProject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProject(x uint64) (n int) {
	return sovProject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobPostingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobPostingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreelancerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FreelancerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			m.TotalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaidAmount", wireType)
			}
			m.PaidAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaidAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAmount", wireType)
			}
			m.EscrowAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscrowAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			m.StartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedEndDate", wireType)
			}
			m.ExpectedEndDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectedEndDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualEndDate", wireType)
			}
			m.ActualEndDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActualEndDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProject = fmt.Errorf("proto: unexpected end of group")
)
