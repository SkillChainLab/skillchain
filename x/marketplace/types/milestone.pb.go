// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: skillchain/marketplace/milestone.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Milestone struct {
	Index       string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	ProjectId   string `protobuf:"bytes,2,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Amount      uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	DueDate     int64  `protobuf:"varint,6,opt,name=dueDate,proto3" json:"dueDate,omitempty"`
	Status      string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	IsCompleted bool   `protobuf:"varint,8,opt,name=isCompleted,proto3" json:"isCompleted,omitempty"`
	IsPaid      bool   `protobuf:"varint,9,opt,name=isPaid,proto3" json:"isPaid,omitempty"`
	SubmittedAt int64  `protobuf:"varint,10,opt,name=submittedAt,proto3" json:"submittedAt,omitempty"`
	ApprovedAt  int64  `protobuf:"varint,11,opt,name=approvedAt,proto3" json:"approvedAt,omitempty"`
	Creator     string `protobuf:"bytes,12,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Milestone) Reset()         { *m = Milestone{} }
func (m *Milestone) String() string { return proto.CompactTextString(m) }
func (*Milestone) ProtoMessage()    {}
func (*Milestone) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd1257ada5f9564d, []int{0}
}
func (m *Milestone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Milestone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Milestone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Milestone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Milestone.Merge(m, src)
}
func (m *Milestone) XXX_Size() int {
	return m.Size()
}
func (m *Milestone) XXX_DiscardUnknown() {
	xxx_messageInfo_Milestone.DiscardUnknown(m)
}

var xxx_messageInfo_Milestone proto.InternalMessageInfo

func (m *Milestone) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Milestone) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Milestone) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Milestone) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Milestone) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Milestone) GetDueDate() int64 {
	if m != nil {
		return m.DueDate
	}
	return 0
}

func (m *Milestone) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Milestone) GetIsCompleted() bool {
	if m != nil {
		return m.IsCompleted
	}
	return false
}

func (m *Milestone) GetIsPaid() bool {
	if m != nil {
		return m.IsPaid
	}
	return false
}

func (m *Milestone) GetSubmittedAt() int64 {
	if m != nil {
		return m.SubmittedAt
	}
	return 0
}

func (m *Milestone) GetApprovedAt() int64 {
	if m != nil {
		return m.ApprovedAt
	}
	return 0
}

func (m *Milestone) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Milestone)(nil), "skillchain.marketplace.Milestone")
}

func init() {
	proto.RegisterFile("skillchain/marketplace/milestone.proto", fileDescriptor_cd1257ada5f9564d)
}

var fileDescriptor_cd1257ada5f9564d = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbb, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0xeb, 0xde, 0xe3, 0x32, 0x59, 0xa8, 0xf2, 0x80, 0xac, 0x88, 0x01, 0x65, 0x6a, 0x07,
	0x16, 0x56, 0x2e, 0x0b, 0x03, 0x12, 0xca, 0xc8, 0xe6, 0xc6, 0x47, 0xc2, 0x34, 0x89, 0x2d, 0xfb,
	0x04, 0x95, 0xb7, 0xe0, 0xb1, 0x18, 0xbb, 0xc1, 0x88, 0xda, 0x17, 0x41, 0x71, 0x1b, 0xd5, 0x8c,
	0xdf, 0x7f, 0xb1, 0x8f, 0xf4, 0xd3, 0x2b, 0xbf, 0xd6, 0x65, 0x59, 0xbc, 0x4a, 0x5d, 0x2f, 0x2b,
	0xe9, 0xd6, 0x80, 0xb6, 0x94, 0x05, 0x2c, 0x2b, 0x5d, 0x82, 0x47, 0x53, 0xc3, 0xc2, 0x3a, 0x83,
	0x86, 0xcd, 0x4f, 0xb9, 0x45, 0x94, 0xbb, 0xfc, 0xee, 0xd3, 0xe4, 0xa9, 0xcb, 0xb2, 0x73, 0x3a,
	0xd2, 0xb5, 0x82, 0x0d, 0x27, 0x29, 0xc9, 0x92, 0xfc, 0x00, 0xec, 0x82, 0x26, 0xd6, 0x99, 0x37,
	0x28, 0xf0, 0x51, 0xf1, 0x7e, 0x70, 0x4e, 0x42, 0xdb, 0x41, 0x8d, 0x25, 0xf0, 0xc1, 0xa1, 0x13,
	0x80, 0xa5, 0x74, 0xa6, 0xc0, 0x17, 0x4e, 0x5b, 0xd4, 0xa6, 0xe6, 0xc3, 0xe0, 0xc5, 0x12, 0x9b,
	0xd3, 0xb1, 0xac, 0x4c, 0x53, 0x23, 0x1f, 0xa5, 0x24, 0x1b, 0xe6, 0x47, 0x62, 0x9c, 0x4e, 0x54,
	0x03, 0x0f, 0x12, 0x81, 0x8f, 0x53, 0x92, 0x0d, 0xf2, 0x0e, 0xdb, 0x86, 0x47, 0x89, 0x8d, 0xe7,
	0x93, 0xf0, 0xdc, 0x91, 0xda, 0xbf, 0xb4, 0xbf, 0x37, 0x95, 0x2d, 0x01, 0x41, 0xf1, 0x69, 0x4a,
	0xb2, 0x69, 0x1e, 0x4b, 0x6d, 0x53, 0xfb, 0x67, 0xa9, 0x15, 0x4f, 0x82, 0x79, 0xa4, 0xb6, 0xe9,
	0x9b, 0x55, 0xa5, 0x11, 0x41, 0xdd, 0x22, 0xa7, 0xe1, 0xbf, 0x58, 0x62, 0x82, 0x52, 0x69, 0xad,
	0x33, 0xef, 0x21, 0x30, 0x0b, 0x81, 0x48, 0x69, 0xaf, 0x2d, 0x1c, 0x48, 0x34, 0x8e, 0x9f, 0x85,
	0xa3, 0x3a, 0xbc, 0xbb, 0xf9, 0xda, 0x09, 0xb2, 0xdd, 0x09, 0xf2, 0xbb, 0x13, 0xe4, 0x73, 0x2f,
	0x7a, 0xdb, 0xbd, 0xe8, 0xfd, 0xec, 0x45, 0xef, 0x45, 0x44, 0x9b, 0x6d, 0xfe, 0xad, 0x86, 0x1f,
	0x16, 0xfc, 0x6a, 0x1c, 0x26, 0xbb, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x09, 0x50, 0x4c,
	0xdc, 0x01, 0x00, 0x00,
}

func (m *Milestone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Milestone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Milestone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMilestone(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x62
	}
	if m.ApprovedAt != 0 {
		i = encodeVarintMilestone(dAtA, i, uint64(m.ApprovedAt))
		i--
		dAtA[i] = 0x58
	}
	if m.SubmittedAt != 0 {
		i = encodeVarintMilestone(dAtA, i, uint64(m.SubmittedAt))
		i--
		dAtA[i] = 0x50
	}
	if m.IsPaid {
		i--
		if m.IsPaid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IsCompleted {
		i--
		if m.IsCompleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintMilestone(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DueDate != 0 {
		i = encodeVarintMilestone(dAtA, i, uint64(m.DueDate))
		i--
		dAtA[i] = 0x30
	}
	if m.Amount != 0 {
		i = encodeVarintMilestone(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMilestone(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMilestone(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProjectId) > 0 {
		i -= len(m.ProjectId)
		copy(dAtA[i:], m.ProjectId)
		i = encodeVarintMilestone(dAtA, i, uint64(len(m.ProjectId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintMilestone(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMilestone(dAtA []byte, offset int, v uint64) int {
	offset -= sovMilestone(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Milestone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovMilestone(uint64(l))
	}
	l = len(m.ProjectId)
	if l > 0 {
		n += 1 + l + sovMilestone(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMilestone(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMilestone(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovMilestone(uint64(m.Amount))
	}
	if m.DueDate != 0 {
		n += 1 + sovMilestone(uint64(m.DueDate))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMilestone(uint64(l))
	}
	if m.IsCompleted {
		n += 2
	}
	if m.IsPaid {
		n += 2
	}
	if m.SubmittedAt != 0 {
		n += 1 + sovMilestone(uint64(m.SubmittedAt))
	}
	if m.ApprovedAt != 0 {
		n += 1 + sovMilestone(uint64(m.ApprovedAt))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMilestone(uint64(l))
	}
	return n
}

func sovMilestone(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMilestone(x uint64) (n int) {
	return sovMilestone(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Milestone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilestone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Milestone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Milestone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueDate", wireType)
			}
			m.DueDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DueDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCompleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCompleted = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPaid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPaid = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmittedAt", wireType)
			}
			m.SubmittedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmittedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedAt", wireType)
			}
			m.ApprovedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApprovedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilestone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMilestone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMilestone(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMilestone
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMilestone
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMilestone
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMilestone
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMilestone        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMilestone          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMilestone = fmt.Errorf("proto: unexpected end of group")
)
