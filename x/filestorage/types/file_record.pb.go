// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: skillchain/filestorage/file_record.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FileRecord struct {
	Index       string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Owner       string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Filename    string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	FileHash    string `protobuf:"bytes,4,opt,name=fileHash,proto3" json:"fileHash,omitempty"`
	FileSize    uint64 `protobuf:"varint,5,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	ContentType string `protobuf:"bytes,6,opt,name=contentType,proto3" json:"contentType,omitempty"`
	UploadDate  uint64 `protobuf:"varint,7,opt,name=uploadDate,proto3" json:"uploadDate,omitempty"`
	IpfsHash    string `protobuf:"bytes,8,opt,name=ipfsHash,proto3" json:"ipfsHash,omitempty"`
	Metadata    string `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
	IsPublic    bool   `protobuf:"varint,10,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	Creator     string `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *FileRecord) Reset()         { *m = FileRecord{} }
func (m *FileRecord) String() string { return proto.CompactTextString(m) }
func (*FileRecord) ProtoMessage()    {}
func (*FileRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5404bc8eb91d7ce, []int{0}
}
func (m *FileRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileRecord.Merge(m, src)
}
func (m *FileRecord) XXX_Size() int {
	return m.Size()
}
func (m *FileRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_FileRecord.DiscardUnknown(m)
}

var xxx_messageInfo_FileRecord proto.InternalMessageInfo

func (m *FileRecord) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *FileRecord) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *FileRecord) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *FileRecord) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *FileRecord) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *FileRecord) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *FileRecord) GetUploadDate() uint64 {
	if m != nil {
		return m.UploadDate
	}
	return 0
}

func (m *FileRecord) GetIpfsHash() string {
	if m != nil {
		return m.IpfsHash
	}
	return ""
}

func (m *FileRecord) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *FileRecord) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

func (m *FileRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*FileRecord)(nil), "skillchain.filestorage.FileRecord")
}

func init() {
	proto.RegisterFile("skillchain/filestorage/file_record.proto", fileDescriptor_b5404bc8eb91d7ce)
}

var fileDescriptor_b5404bc8eb91d7ce = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0xeb, 0xd2, 0x3f, 0xa9, 0xbb, 0x59, 0x08, 0x9d, 0x18, 0xac, 0x88, 0x29, 0x53, 0x19,
	0x58, 0x98, 0x11, 0x42, 0x8c, 0x28, 0x30, 0xb1, 0x20, 0x37, 0xb9, 0x52, 0x0b, 0xd7, 0x8e, 0x6c,
	0x57, 0xb4, 0x3c, 0x05, 0x0f, 0xc4, 0x03, 0x30, 0x76, 0x64, 0x44, 0xc9, 0x8b, 0xa0, 0x38, 0x4a,
	0x1a, 0x36, 0xff, 0xbe, 0xdf, 0x7d, 0xbe, 0xe1, 0x68, 0xe2, 0xde, 0xa4, 0x52, 0xd9, 0x5a, 0x48,
	0x7d, 0xb9, 0x92, 0x0a, 0x9d, 0x37, 0x56, 0xbc, 0x62, 0x78, 0xbf, 0x58, 0xcc, 0x8c, 0xcd, 0x17,
	0x85, 0x35, 0xde, 0xb0, 0xb3, 0xe3, 0xe4, 0xa2, 0x37, 0x79, 0xf1, 0x35, 0xa4, 0xf4, 0x4e, 0x2a,
	0x4c, 0xc3, 0x30, 0x3b, 0xa5, 0x63, 0xa9, 0x73, 0xdc, 0x01, 0x89, 0x49, 0x32, 0x4b, 0x1b, 0xa8,
	0x53, 0xf3, 0xae, 0xd1, 0xc2, 0xb0, 0x49, 0x03, 0xb0, 0x73, 0x1a, 0xd5, 0x3f, 0x69, 0xb1, 0x41,
	0x38, 0x09, 0xa2, 0xe3, 0xd6, 0xdd, 0x0b, 0xb7, 0x86, 0xd1, 0xd1, 0xd5, 0xdc, 0xba, 0x47, 0xf9,
	0x81, 0x30, 0x8e, 0x49, 0x32, 0x4a, 0x3b, 0x66, 0x31, 0x9d, 0x67, 0x46, 0x7b, 0xd4, 0xfe, 0x69,
	0x5f, 0x20, 0x4c, 0x42, 0xb5, 0x1f, 0x31, 0x4e, 0xe9, 0xb6, 0x50, 0x46, 0xe4, 0xb7, 0xc2, 0x23,
	0x4c, 0x43, 0xbf, 0x97, 0xd4, 0xbf, 0xcb, 0x62, 0xe5, 0xc2, 0xe6, 0xa8, 0xd9, 0xdc, 0x72, 0xed,
	0x36, 0xe8, 0x45, 0x2e, 0xbc, 0x80, 0x59, 0xe3, 0x5a, 0x0e, 0x3d, 0xf7, 0xb0, 0x5d, 0x2a, 0x99,
	0x01, 0x8d, 0x49, 0x12, 0xa5, 0x1d, 0x33, 0xa0, 0xd3, 0xcc, 0xa2, 0xf0, 0xc6, 0xc2, 0x3c, 0xd4,
	0x5a, 0xbc, 0xb9, 0xfe, 0x2e, 0x39, 0x39, 0x94, 0x9c, 0xfc, 0x96, 0x9c, 0x7c, 0x56, 0x7c, 0x70,
	0xa8, 0xf8, 0xe0, 0xa7, 0xe2, 0x83, 0x67, 0xde, 0x3b, 0xcd, 0xee, 0xdf, 0x71, 0xfc, 0xbe, 0x40,
	0xb7, 0x9c, 0x84, 0xbb, 0x5c, 0xfd, 0x05, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xd7, 0x2c, 0x29, 0xc3,
	0x01, 0x00, 0x00,
}

func (m *FileRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintFileRecord(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x5a
	}
	if m.IsPublic {
		i--
		if m.IsPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintFileRecord(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.IpfsHash) > 0 {
		i -= len(m.IpfsHash)
		copy(dAtA[i:], m.IpfsHash)
		i = encodeVarintFileRecord(dAtA, i, uint64(len(m.IpfsHash)))
		i--
		dAtA[i] = 0x42
	}
	if m.UploadDate != 0 {
		i = encodeVarintFileRecord(dAtA, i, uint64(m.UploadDate))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintFileRecord(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x32
	}
	if m.FileSize != 0 {
		i = encodeVarintFileRecord(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintFileRecord(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintFileRecord(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintFileRecord(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintFileRecord(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFileRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovFileRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FileRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovFileRecord(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovFileRecord(uint64(l))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovFileRecord(uint64(l))
	}
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovFileRecord(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovFileRecord(uint64(m.FileSize))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovFileRecord(uint64(l))
	}
	if m.UploadDate != 0 {
		n += 1 + sovFileRecord(uint64(m.UploadDate))
	}
	l = len(m.IpfsHash)
	if l > 0 {
		n += 1 + l + sovFileRecord(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovFileRecord(uint64(l))
	}
	if m.IsPublic {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovFileRecord(uint64(l))
	}
	return n
}

func sovFileRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFileRecord(x uint64) (n int) {
	return sovFileRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FileRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadDate", wireType)
			}
			m.UploadDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpfsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPublic = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFileRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFileRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFileRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFileRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFileRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFileRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFileRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFileRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFileRecord = fmt.Errorf("proto: unexpected end of group")
)
