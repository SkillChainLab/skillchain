// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: skillchain/analytics/revenue_record.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RevenueRecord struct {
	Index           string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	TransactionType string `protobuf:"bytes,2,opt,name=transactionType,proto3" json:"transactionType,omitempty"`
	Amount          uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency        string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	FromAddress     string `protobuf:"bytes,5,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	ToAddress       string `protobuf:"bytes,6,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	Timestamp       uint64 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FeeAmount       uint64 `protobuf:"varint,8,opt,name=feeAmount,proto3" json:"feeAmount,omitempty"`
	ProjectId       string `protobuf:"bytes,9,opt,name=projectId,proto3" json:"projectId,omitempty"`
	PlatformFee     uint64 `protobuf:"varint,10,opt,name=platformFee,proto3" json:"platformFee,omitempty"`
	Creator         string `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *RevenueRecord) Reset()         { *m = RevenueRecord{} }
func (m *RevenueRecord) String() string { return proto.CompactTextString(m) }
func (*RevenueRecord) ProtoMessage()    {}
func (*RevenueRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd9c7368932934ae, []int{0}
}
func (m *RevenueRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevenueRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevenueRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevenueRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevenueRecord.Merge(m, src)
}
func (m *RevenueRecord) XXX_Size() int {
	return m.Size()
}
func (m *RevenueRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RevenueRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RevenueRecord proto.InternalMessageInfo

func (m *RevenueRecord) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *RevenueRecord) GetTransactionType() string {
	if m != nil {
		return m.TransactionType
	}
	return ""
}

func (m *RevenueRecord) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *RevenueRecord) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *RevenueRecord) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *RevenueRecord) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *RevenueRecord) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RevenueRecord) GetFeeAmount() uint64 {
	if m != nil {
		return m.FeeAmount
	}
	return 0
}

func (m *RevenueRecord) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *RevenueRecord) GetPlatformFee() uint64 {
	if m != nil {
		return m.PlatformFee
	}
	return 0
}

func (m *RevenueRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*RevenueRecord)(nil), "skillchain.analytics.RevenueRecord")
}

func init() {
	proto.RegisterFile("skillchain/analytics/revenue_record.proto", fileDescriptor_bd9c7368932934ae)
}

var fileDescriptor_bd9c7368932934ae = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0x9b, 0xda, 0xbf, 0x29, 0x22, 0x84, 0x22, 0x41, 0x4a, 0x28, 0x9e, 0xea, 0xa5, 0x3d,
	0x08, 0xde, 0xeb, 0x41, 0xf0, 0xba, 0x78, 0xf2, 0x22, 0x31, 0x3b, 0xc5, 0xe8, 0x6e, 0x12, 0x26,
	0xa9, 0x74, 0xdf, 0xc2, 0xc7, 0xf2, 0xd8, 0xa3, 0xde, 0xa4, 0x7d, 0x11, 0x69, 0xd6, 0xee, 0x2e,
	0x1e, 0xbf, 0xdf, 0xef, 0x9b, 0x64, 0x60, 0xe8, 0x95, 0x7f, 0xd3, 0x59, 0xa6, 0x5e, 0xa4, 0x36,
	0x0b, 0x69, 0x64, 0x56, 0x04, 0xad, 0xfc, 0x02, 0xe1, 0x1d, 0xcc, 0x1a, 0x9e, 0x10, 0x94, 0xc5,
	0x74, 0xee, 0xd0, 0x06, 0xcb, 0xc6, 0x75, 0x75, 0x5e, 0x55, 0x2f, 0xbf, 0xdb, 0xf4, 0x34, 0x29,
	0xeb, 0x49, 0x6c, 0xb3, 0x31, 0xed, 0x6a, 0x93, 0xc2, 0x86, 0x93, 0x29, 0x99, 0x0d, 0x93, 0x32,
	0xb0, 0x19, 0x3d, 0x0b, 0x28, 0x8d, 0x97, 0x2a, 0x68, 0x6b, 0x1e, 0x0a, 0x07, 0xbc, 0x1d, 0xfd,
	0x7f, 0xcc, 0xce, 0x69, 0x4f, 0xe6, 0x76, 0x6d, 0x02, 0x3f, 0x99, 0x92, 0x59, 0x27, 0xf9, 0x4b,
	0xec, 0x82, 0x0e, 0xd4, 0x1a, 0x11, 0x8c, 0x2a, 0x78, 0x27, 0x8e, 0x56, 0x99, 0x4d, 0xe9, 0x68,
	0x85, 0x36, 0x5f, 0xa6, 0x29, 0x82, 0xf7, 0xbc, 0x1b, 0x75, 0x13, 0xb1, 0x09, 0x1d, 0x06, 0x7b,
	0xf4, 0xbd, 0xe8, 0x6b, 0x10, 0xad, 0xce, 0xc1, 0x07, 0x99, 0x3b, 0xde, 0x8f, 0xdf, 0xd6, 0xe0,
	0x60, 0x57, 0x00, 0xcb, 0x72, 0xa9, 0x41, 0x69, 0x2b, 0x70, 0xb0, 0x0e, 0xed, 0x2b, 0xa8, 0x70,
	0x9f, 0xf2, 0x61, 0xf9, 0x72, 0x05, 0x0e, 0x9b, 0xb9, 0x4c, 0x86, 0x95, 0xc5, 0xfc, 0x0e, 0x80,
	0xd3, 0x38, 0xdd, 0x44, 0x8c, 0xd3, 0xbe, 0x42, 0x90, 0xc1, 0x22, 0x1f, 0xc5, 0xe9, 0x63, 0xbc,
	0xbd, 0xf9, 0xdc, 0x09, 0xb2, 0xdd, 0x09, 0xf2, 0xb3, 0x13, 0xe4, 0x63, 0x2f, 0x5a, 0xdb, 0xbd,
	0x68, 0x7d, 0xed, 0x45, 0xeb, 0x71, 0xd2, 0x38, 0xdb, 0xa6, 0x71, 0xb8, 0x50, 0x38, 0xf0, 0xcf,
	0xbd, 0x78, 0xb0, 0xeb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25, 0xd7, 0xfb, 0xd7, 0xdd, 0x01,
	0x00, 0x00,
}

func (m *RevenueRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevenueRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevenueRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRevenueRecord(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PlatformFee != 0 {
		i = encodeVarintRevenueRecord(dAtA, i, uint64(m.PlatformFee))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ProjectId) > 0 {
		i -= len(m.ProjectId)
		copy(dAtA[i:], m.ProjectId)
		i = encodeVarintRevenueRecord(dAtA, i, uint64(len(m.ProjectId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.FeeAmount != 0 {
		i = encodeVarintRevenueRecord(dAtA, i, uint64(m.FeeAmount))
		i--
		dAtA[i] = 0x40
	}
	if m.Timestamp != 0 {
		i = encodeVarintRevenueRecord(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintRevenueRecord(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintRevenueRecord(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintRevenueRecord(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i = encodeVarintRevenueRecord(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TransactionType) > 0 {
		i -= len(m.TransactionType)
		copy(dAtA[i:], m.TransactionType)
		i = encodeVarintRevenueRecord(dAtA, i, uint64(len(m.TransactionType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintRevenueRecord(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRevenueRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovRevenueRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RevenueRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovRevenueRecord(uint64(l))
	}
	l = len(m.TransactionType)
	if l > 0 {
		n += 1 + l + sovRevenueRecord(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovRevenueRecord(uint64(m.Amount))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovRevenueRecord(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovRevenueRecord(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovRevenueRecord(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovRevenueRecord(uint64(m.Timestamp))
	}
	if m.FeeAmount != 0 {
		n += 1 + sovRevenueRecord(uint64(m.FeeAmount))
	}
	l = len(m.ProjectId)
	if l > 0 {
		n += 1 + l + sovRevenueRecord(uint64(l))
	}
	if m.PlatformFee != 0 {
		n += 1 + sovRevenueRecord(uint64(m.PlatformFee))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRevenueRecord(uint64(l))
	}
	return n
}

func sovRevenueRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRevenueRecord(x uint64) (n int) {
	return sovRevenueRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RevenueRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRevenueRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevenueRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevenueRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevenueRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevenueRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevenueRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevenueRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevenueRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevenueRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevenueRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevenueRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevenueRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevenueRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevenueRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevenueRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevenueRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevenueRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevenueRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevenueRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevenueRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAmount", wireType)
			}
			m.FeeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevenueRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevenueRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevenueRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevenueRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformFee", wireType)
			}
			m.PlatformFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevenueRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatformFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevenueRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevenueRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevenueRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRevenueRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRevenueRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRevenueRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRevenueRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRevenueRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRevenueRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRevenueRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRevenueRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRevenueRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRevenueRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRevenueRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRevenueRecord = fmt.Errorf("proto: unexpected end of group")
)
