// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: skillchain/profile/user_skill.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserSkill struct {
	Index            string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Owner            string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	SkillName        string `protobuf:"bytes,3,opt,name=skillName,proto3" json:"skillName,omitempty"`
	ProficiencyLevel string `protobuf:"bytes,4,opt,name=proficiencyLevel,proto3" json:"proficiencyLevel,omitempty"`
	YearsExperience  uint64 `protobuf:"varint,5,opt,name=yearsExperience,proto3" json:"yearsExperience,omitempty"`
	Verified         bool   `protobuf:"varint,6,opt,name=verified,proto3" json:"verified,omitempty"`
	VerifiedBy       string `protobuf:"bytes,7,opt,name=verifiedBy,proto3" json:"verifiedBy,omitempty"`
	VerificationDate uint64 `protobuf:"varint,8,opt,name=verificationDate,proto3" json:"verificationDate,omitempty"`
	EndorsementCount uint64 `protobuf:"varint,9,opt,name=endorsementCount,proto3" json:"endorsementCount,omitempty"`
	Creator          string `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *UserSkill) Reset()         { *m = UserSkill{} }
func (m *UserSkill) String() string { return proto.CompactTextString(m) }
func (*UserSkill) ProtoMessage()    {}
func (*UserSkill) Descriptor() ([]byte, []int) {
	return fileDescriptor_9381b8c805fcd1ba, []int{0}
}
func (m *UserSkill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSkill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSkill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSkill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSkill.Merge(m, src)
}
func (m *UserSkill) XXX_Size() int {
	return m.Size()
}
func (m *UserSkill) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSkill.DiscardUnknown(m)
}

var xxx_messageInfo_UserSkill proto.InternalMessageInfo

func (m *UserSkill) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *UserSkill) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *UserSkill) GetSkillName() string {
	if m != nil {
		return m.SkillName
	}
	return ""
}

func (m *UserSkill) GetProficiencyLevel() string {
	if m != nil {
		return m.ProficiencyLevel
	}
	return ""
}

func (m *UserSkill) GetYearsExperience() uint64 {
	if m != nil {
		return m.YearsExperience
	}
	return 0
}

func (m *UserSkill) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *UserSkill) GetVerifiedBy() string {
	if m != nil {
		return m.VerifiedBy
	}
	return ""
}

func (m *UserSkill) GetVerificationDate() uint64 {
	if m != nil {
		return m.VerificationDate
	}
	return 0
}

func (m *UserSkill) GetEndorsementCount() uint64 {
	if m != nil {
		return m.EndorsementCount
	}
	return 0
}

func (m *UserSkill) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*UserSkill)(nil), "skillchain.profile.UserSkill")
}

func init() {
	proto.RegisterFile("skillchain/profile/user_skill.proto", fileDescriptor_9381b8c805fcd1ba)
}

var fileDescriptor_9381b8c805fcd1ba = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0xeb, 0xd2, 0xbf, 0x78, 0x01, 0x59, 0x0c, 0x56, 0x85, 0xac, 0x0a, 0x96, 0x88, 0xa1,
	0x1d, 0xe0, 0x09, 0x0a, 0x6c, 0x88, 0x21, 0x88, 0x85, 0x05, 0x99, 0xe4, 0x56, 0x58, 0xa4, 0x76,
	0x74, 0xed, 0x96, 0xe4, 0x2d, 0x78, 0x2c, 0xc6, 0x8e, 0xb0, 0xa1, 0xe4, 0x45, 0x50, 0x1c, 0xfa,
	0xa3, 0x76, 0xcb, 0xf9, 0xee, 0xa7, 0x1c, 0x4b, 0x87, 0x5e, 0xd8, 0x77, 0x95, 0xa6, 0xf1, 0x9b,
	0x54, 0x7a, 0x92, 0xa1, 0x99, 0xa9, 0x14, 0x26, 0x0b, 0x0b, 0xf8, 0xe2, 0xf9, 0x38, 0x43, 0xe3,
	0x0c, 0x63, 0x5b, 0x69, 0xfc, 0x2f, 0x9d, 0xff, 0xb4, 0x69, 0xf0, 0x64, 0x01, 0x1f, 0xeb, 0x13,
	0x3b, 0xa5, 0x5d, 0xa5, 0x13, 0xc8, 0x39, 0x19, 0x91, 0x30, 0x88, 0x9a, 0x50, 0x53, 0xf3, 0xa1,
	0x01, 0x79, 0xbb, 0xa1, 0x3e, 0xb0, 0x33, 0x1a, 0xf8, 0xff, 0x3d, 0xc8, 0x39, 0xf0, 0x23, 0x7f,
	0xd9, 0x02, 0x76, 0x49, 0x4f, 0x7c, 0x45, 0xac, 0x40, 0xc7, 0xc5, 0x3d, 0x2c, 0x21, 0xe5, 0x1d,
	0x2f, 0x1d, 0x70, 0x16, 0xd2, 0xe3, 0x02, 0x24, 0xda, 0xbb, 0x3c, 0x03, 0xac, 0x39, 0xf0, 0xee,
	0x88, 0x84, 0x9d, 0x68, 0x1f, 0xb3, 0x21, 0x1d, 0x2c, 0x01, 0xd5, 0x4c, 0x41, 0xc2, 0x7b, 0x23,
	0x12, 0x0e, 0xa2, 0x4d, 0x66, 0x82, 0xd2, 0xf5, 0xf7, 0xb4, 0xe0, 0x7d, 0xdf, 0xb5, 0x43, 0xea,
	0x17, 0x35, 0x29, 0x96, 0x4e, 0x19, 0x7d, 0x2b, 0x1d, 0xf0, 0x81, 0xaf, 0x39, 0xe0, 0xb5, 0x0b,
	0x3a, 0x31, 0x68, 0x61, 0x0e, 0xda, 0xdd, 0x98, 0x85, 0x76, 0x3c, 0x68, 0xdc, 0x7d, 0xce, 0x38,
	0xed, 0xc7, 0x08, 0xd2, 0x19, 0xe4, 0xd4, 0x97, 0xae, 0xe3, 0xf4, 0xfa, 0xab, 0x14, 0x64, 0x55,
	0x0a, 0xf2, 0x5b, 0x0a, 0xf2, 0x59, 0x89, 0xd6, 0xaa, 0x12, 0xad, 0xef, 0x4a, 0xb4, 0x9e, 0x87,
	0x3b, 0x73, 0xe5, 0x9b, 0xc1, 0x5c, 0x91, 0x81, 0x7d, 0xed, 0xf9, 0xb1, 0xae, 0xfe, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x7a, 0x64, 0xfe, 0xa6, 0xd3, 0x01, 0x00, 0x00,
}

func (m *UserSkill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSkill) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSkill) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintUserSkill(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x52
	}
	if m.EndorsementCount != 0 {
		i = encodeVarintUserSkill(dAtA, i, uint64(m.EndorsementCount))
		i--
		dAtA[i] = 0x48
	}
	if m.VerificationDate != 0 {
		i = encodeVarintUserSkill(dAtA, i, uint64(m.VerificationDate))
		i--
		dAtA[i] = 0x40
	}
	if len(m.VerifiedBy) > 0 {
		i -= len(m.VerifiedBy)
		copy(dAtA[i:], m.VerifiedBy)
		i = encodeVarintUserSkill(dAtA, i, uint64(len(m.VerifiedBy)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.YearsExperience != 0 {
		i = encodeVarintUserSkill(dAtA, i, uint64(m.YearsExperience))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ProficiencyLevel) > 0 {
		i -= len(m.ProficiencyLevel)
		copy(dAtA[i:], m.ProficiencyLevel)
		i = encodeVarintUserSkill(dAtA, i, uint64(len(m.ProficiencyLevel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SkillName) > 0 {
		i -= len(m.SkillName)
		copy(dAtA[i:], m.SkillName)
		i = encodeVarintUserSkill(dAtA, i, uint64(len(m.SkillName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintUserSkill(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintUserSkill(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUserSkill(dAtA []byte, offset int, v uint64) int {
	offset -= sovUserSkill(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserSkill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovUserSkill(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovUserSkill(uint64(l))
	}
	l = len(m.SkillName)
	if l > 0 {
		n += 1 + l + sovUserSkill(uint64(l))
	}
	l = len(m.ProficiencyLevel)
	if l > 0 {
		n += 1 + l + sovUserSkill(uint64(l))
	}
	if m.YearsExperience != 0 {
		n += 1 + sovUserSkill(uint64(m.YearsExperience))
	}
	if m.Verified {
		n += 2
	}
	l = len(m.VerifiedBy)
	if l > 0 {
		n += 1 + l + sovUserSkill(uint64(l))
	}
	if m.VerificationDate != 0 {
		n += 1 + sovUserSkill(uint64(m.VerificationDate))
	}
	if m.EndorsementCount != 0 {
		n += 1 + sovUserSkill(uint64(m.EndorsementCount))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovUserSkill(uint64(l))
	}
	return n
}

func sovUserSkill(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUserSkill(x uint64) (n int) {
	return sovUserSkill(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserSkill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSkill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSkill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserSkill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserSkill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserSkill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserSkill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserSkill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserSkill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkillName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProficiencyLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserSkill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserSkill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProficiencyLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YearsExperience", wireType)
			}
			m.YearsExperience = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YearsExperience |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserSkill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserSkill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifiedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationDate", wireType)
			}
			m.VerificationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerificationDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndorsementCount", wireType)
			}
			m.EndorsementCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndorsementCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserSkill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserSkill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserSkill(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserSkill
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserSkill
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserSkill
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUserSkill
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUserSkill
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUserSkill
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUserSkill        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserSkill          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUserSkill = fmt.Errorf("proto: unexpected end of group")
)
