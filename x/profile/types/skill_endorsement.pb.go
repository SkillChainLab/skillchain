// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: skillchain/profile/skill_endorsement.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SkillEndorsement struct {
	Index             string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Endorser          string `protobuf:"bytes,2,opt,name=endorser,proto3" json:"endorser,omitempty"`
	TargetUser        string `protobuf:"bytes,3,opt,name=targetUser,proto3" json:"targetUser,omitempty"`
	SkillName         string `protobuf:"bytes,4,opt,name=skillName,proto3" json:"skillName,omitempty"`
	EndorsementType   string `protobuf:"bytes,5,opt,name=endorsementType,proto3" json:"endorsementType,omitempty"`
	Comment           string `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	CreatedAt         uint64 `protobuf:"varint,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	SkillTokensStaked uint64 `protobuf:"varint,8,opt,name=skillTokensStaked,proto3" json:"skillTokensStaked,omitempty"`
	Creator           string `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *SkillEndorsement) Reset()         { *m = SkillEndorsement{} }
func (m *SkillEndorsement) String() string { return proto.CompactTextString(m) }
func (*SkillEndorsement) ProtoMessage()    {}
func (*SkillEndorsement) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbda5bc6e24a8339, []int{0}
}
func (m *SkillEndorsement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkillEndorsement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkillEndorsement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkillEndorsement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkillEndorsement.Merge(m, src)
}
func (m *SkillEndorsement) XXX_Size() int {
	return m.Size()
}
func (m *SkillEndorsement) XXX_DiscardUnknown() {
	xxx_messageInfo_SkillEndorsement.DiscardUnknown(m)
}

var xxx_messageInfo_SkillEndorsement proto.InternalMessageInfo

func (m *SkillEndorsement) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *SkillEndorsement) GetEndorser() string {
	if m != nil {
		return m.Endorser
	}
	return ""
}

func (m *SkillEndorsement) GetTargetUser() string {
	if m != nil {
		return m.TargetUser
	}
	return ""
}

func (m *SkillEndorsement) GetSkillName() string {
	if m != nil {
		return m.SkillName
	}
	return ""
}

func (m *SkillEndorsement) GetEndorsementType() string {
	if m != nil {
		return m.EndorsementType
	}
	return ""
}

func (m *SkillEndorsement) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *SkillEndorsement) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SkillEndorsement) GetSkillTokensStaked() uint64 {
	if m != nil {
		return m.SkillTokensStaked
	}
	return 0
}

func (m *SkillEndorsement) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*SkillEndorsement)(nil), "skillchain.profile.SkillEndorsement")
}

func init() {
	proto.RegisterFile("skillchain/profile/skill_endorsement.proto", fileDescriptor_fbda5bc6e24a8339)
}

var fileDescriptor_fbda5bc6e24a8339 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0xe3, 0xd2, 0xbf, 0xdc, 0x05, 0xb0, 0x18, 0xac, 0x0a, 0x59, 0x15, 0x53, 0x84, 0x50,
	0x3b, 0xc0, 0x0b, 0x80, 0xc4, 0xca, 0xd0, 0x96, 0x85, 0x05, 0x85, 0xe4, 0x02, 0x51, 0x12, 0x3b,
	0x72, 0x3c, 0xb4, 0x6f, 0xc1, 0x83, 0xf0, 0x20, 0x8c, 0x1d, 0x19, 0x51, 0xf2, 0x22, 0xc8, 0xb7,
	0xa1, 0x89, 0xe8, 0x78, 0xbe, 0xf3, 0x25, 0x27, 0xca, 0x85, 0xcb, 0x32, 0x4d, 0xb2, 0x2c, 0x7a,
	0x0f, 0x13, 0x35, 0x2f, 0x8c, 0x7e, 0x4d, 0x32, 0x9c, 0x13, 0x7a, 0x46, 0x15, 0x6b, 0x53, 0x62,
	0x8e, 0xca, 0xce, 0x0a, 0xa3, 0xad, 0xe6, 0xbc, 0x75, 0x67, 0x8d, 0x7b, 0xf1, 0xd9, 0x83, 0x93,
	0xa5, 0xc3, 0xf7, 0xad, 0xce, 0xcf, 0x60, 0x90, 0xa8, 0x18, 0xd7, 0x82, 0x4d, 0x59, 0xe0, 0x2f,
	0x76, 0x81, 0x4f, 0x60, 0xdc, 0xbc, 0xd3, 0x88, 0x1e, 0x15, 0xfb, 0xcc, 0x25, 0x80, 0x0d, 0xcd,
	0x1b, 0xda, 0x47, 0xd7, 0x1e, 0x51, 0xdb, 0x21, 0xfc, 0x1c, 0x7c, 0x1a, 0x7f, 0x08, 0x73, 0x14,
	0x7d, 0xaa, 0x5b, 0xc0, 0x03, 0x38, 0xee, 0x7c, 0xed, 0x6a, 0x53, 0xa0, 0x18, 0x90, 0xf3, 0x1f,
	0x73, 0x01, 0xa3, 0x48, 0xe7, 0x2e, 0x8a, 0x21, 0x19, 0x7f, 0xd1, 0x2d, 0x44, 0x06, 0x43, 0x8b,
	0xf1, 0xad, 0x15, 0xa3, 0x29, 0x0b, 0xfa, 0x8b, 0x16, 0xf0, 0x2b, 0x38, 0xa5, 0xb9, 0x95, 0x4e,
	0x51, 0x95, 0x4b, 0x1b, 0xa6, 0x18, 0x8b, 0x31, 0x59, 0x87, 0x05, 0xad, 0xb8, 0x47, 0xb5, 0x11,
	0x7e, 0xb3, 0xb2, 0x8b, 0x77, 0x37, 0x5f, 0x95, 0x64, 0xdb, 0x4a, 0xb2, 0x9f, 0x4a, 0xb2, 0x8f,
	0x5a, 0x7a, 0xdb, 0x5a, 0x7a, 0xdf, 0xb5, 0xf4, 0x9e, 0x26, 0x9d, 0x43, 0xac, 0xf7, 0xa7, 0xb0,
	0x9b, 0x02, 0xcb, 0x97, 0x21, 0xfd, 0xff, 0xeb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x97, 0xbe,
	0xa0, 0xe1, 0xad, 0x01, 0x00, 0x00,
}

func (m *SkillEndorsement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillEndorsement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkillEndorsement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSkillEndorsement(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.SkillTokensStaked != 0 {
		i = encodeVarintSkillEndorsement(dAtA, i, uint64(m.SkillTokensStaked))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedAt != 0 {
		i = encodeVarintSkillEndorsement(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintSkillEndorsement(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EndorsementType) > 0 {
		i -= len(m.EndorsementType)
		copy(dAtA[i:], m.EndorsementType)
		i = encodeVarintSkillEndorsement(dAtA, i, uint64(len(m.EndorsementType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SkillName) > 0 {
		i -= len(m.SkillName)
		copy(dAtA[i:], m.SkillName)
		i = encodeVarintSkillEndorsement(dAtA, i, uint64(len(m.SkillName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetUser) > 0 {
		i -= len(m.TargetUser)
		copy(dAtA[i:], m.TargetUser)
		i = encodeVarintSkillEndorsement(dAtA, i, uint64(len(m.TargetUser)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Endorser) > 0 {
		i -= len(m.Endorser)
		copy(dAtA[i:], m.Endorser)
		i = encodeVarintSkillEndorsement(dAtA, i, uint64(len(m.Endorser)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintSkillEndorsement(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSkillEndorsement(dAtA []byte, offset int, v uint64) int {
	offset -= sovSkillEndorsement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SkillEndorsement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovSkillEndorsement(uint64(l))
	}
	l = len(m.Endorser)
	if l > 0 {
		n += 1 + l + sovSkillEndorsement(uint64(l))
	}
	l = len(m.TargetUser)
	if l > 0 {
		n += 1 + l + sovSkillEndorsement(uint64(l))
	}
	l = len(m.SkillName)
	if l > 0 {
		n += 1 + l + sovSkillEndorsement(uint64(l))
	}
	l = len(m.EndorsementType)
	if l > 0 {
		n += 1 + l + sovSkillEndorsement(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovSkillEndorsement(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovSkillEndorsement(uint64(m.CreatedAt))
	}
	if m.SkillTokensStaked != 0 {
		n += 1 + sovSkillEndorsement(uint64(m.SkillTokensStaked))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSkillEndorsement(uint64(l))
	}
	return n
}

func sovSkillEndorsement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSkillEndorsement(x uint64) (n int) {
	return sovSkillEndorsement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SkillEndorsement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkillEndorsement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillEndorsement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillEndorsement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkillEndorsement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkillEndorsement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkillEndorsement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endorser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkillEndorsement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkillEndorsement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkillEndorsement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endorser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkillEndorsement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkillEndorsement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkillEndorsement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkillEndorsement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkillEndorsement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkillEndorsement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkillName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndorsementType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkillEndorsement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkillEndorsement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkillEndorsement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndorsementType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkillEndorsement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkillEndorsement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkillEndorsement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkillEndorsement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillTokensStaked", wireType)
			}
			m.SkillTokensStaked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkillEndorsement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillTokensStaked |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkillEndorsement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkillEndorsement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkillEndorsement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkillEndorsement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSkillEndorsement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSkillEndorsement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSkillEndorsement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSkillEndorsement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSkillEndorsement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSkillEndorsement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSkillEndorsement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSkillEndorsement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSkillEndorsement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSkillEndorsement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSkillEndorsement = fmt.Errorf("proto: unexpected end of group")
)
