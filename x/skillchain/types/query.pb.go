// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: skillchain/skillchain/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa94dac8954083c, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa94dac8954083c, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryTokenInfoRequest struct {
}

func (m *QueryTokenInfoRequest) Reset()         { *m = QueryTokenInfoRequest{} }
func (m *QueryTokenInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenInfoRequest) ProtoMessage()    {}
func (*QueryTokenInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa94dac8954083c, []int{2}
}
func (m *QueryTokenInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenInfoRequest.Merge(m, src)
}
func (m *QueryTokenInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenInfoRequest proto.InternalMessageInfo

type QueryTokenInfoResponse struct {
	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Symbol            string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals          uint32 `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Description       string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	TotalSupply       string `protobuf:"bytes,5,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	CirculatingSupply string `protobuf:"bytes,6,opt,name=circulating_supply,json=circulatingSupply,proto3" json:"circulating_supply,omitempty"`
	BurnedAmount      string `protobuf:"bytes,7,opt,name=burned_amount,json=burnedAmount,proto3" json:"burned_amount,omitempty"`
	MaxSupply         string `protobuf:"bytes,8,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`
	BurnEnabled       bool   `protobuf:"varint,9,opt,name=burn_enabled,json=burnEnabled,proto3" json:"burn_enabled,omitempty"`
	ChainDescription  string `protobuf:"bytes,10,opt,name=chain_description,json=chainDescription,proto3" json:"chain_description,omitempty"`
	WebsiteUrl        string `protobuf:"bytes,11,opt,name=website_url,json=websiteUrl,proto3" json:"website_url,omitempty"`
}

func (m *QueryTokenInfoResponse) Reset()         { *m = QueryTokenInfoResponse{} }
func (m *QueryTokenInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenInfoResponse) ProtoMessage()    {}
func (*QueryTokenInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa94dac8954083c, []int{3}
}
func (m *QueryTokenInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenInfoResponse.Merge(m, src)
}
func (m *QueryTokenInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenInfoResponse proto.InternalMessageInfo

func (m *QueryTokenInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryTokenInfoResponse) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *QueryTokenInfoResponse) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *QueryTokenInfoResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *QueryTokenInfoResponse) GetTotalSupply() string {
	if m != nil {
		return m.TotalSupply
	}
	return ""
}

func (m *QueryTokenInfoResponse) GetCirculatingSupply() string {
	if m != nil {
		return m.CirculatingSupply
	}
	return ""
}

func (m *QueryTokenInfoResponse) GetBurnedAmount() string {
	if m != nil {
		return m.BurnedAmount
	}
	return ""
}

func (m *QueryTokenInfoResponse) GetMaxSupply() string {
	if m != nil {
		return m.MaxSupply
	}
	return ""
}

func (m *QueryTokenInfoResponse) GetBurnEnabled() bool {
	if m != nil {
		return m.BurnEnabled
	}
	return false
}

func (m *QueryTokenInfoResponse) GetChainDescription() string {
	if m != nil {
		return m.ChainDescription
	}
	return ""
}

func (m *QueryTokenInfoResponse) GetWebsiteUrl() string {
	if m != nil {
		return m.WebsiteUrl
	}
	return ""
}

type QueryVUSDTreasuryRequest struct {
}

func (m *QueryVUSDTreasuryRequest) Reset()         { *m = QueryVUSDTreasuryRequest{} }
func (m *QueryVUSDTreasuryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVUSDTreasuryRequest) ProtoMessage()    {}
func (*QueryVUSDTreasuryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa94dac8954083c, []int{4}
}
func (m *QueryVUSDTreasuryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVUSDTreasuryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVUSDTreasuryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVUSDTreasuryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVUSDTreasuryRequest.Merge(m, src)
}
func (m *QueryVUSDTreasuryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVUSDTreasuryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVUSDTreasuryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVUSDTreasuryRequest proto.InternalMessageInfo

type QueryVUSDTreasuryResponse struct {
	SkillBalance string `protobuf:"bytes,1,opt,name=skill_balance,json=skillBalance,proto3" json:"skill_balance,omitempty"`
	VusdSupply   string `protobuf:"bytes,2,opt,name=vusd_supply,json=vusdSupply,proto3" json:"vusd_supply,omitempty"`
	ExchangeRate string `protobuf:"bytes,3,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
}

func (m *QueryVUSDTreasuryResponse) Reset()         { *m = QueryVUSDTreasuryResponse{} }
func (m *QueryVUSDTreasuryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVUSDTreasuryResponse) ProtoMessage()    {}
func (*QueryVUSDTreasuryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa94dac8954083c, []int{5}
}
func (m *QueryVUSDTreasuryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVUSDTreasuryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVUSDTreasuryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVUSDTreasuryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVUSDTreasuryResponse.Merge(m, src)
}
func (m *QueryVUSDTreasuryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVUSDTreasuryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVUSDTreasuryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVUSDTreasuryResponse proto.InternalMessageInfo

func (m *QueryVUSDTreasuryResponse) GetSkillBalance() string {
	if m != nil {
		return m.SkillBalance
	}
	return ""
}

func (m *QueryVUSDTreasuryResponse) GetVusdSupply() string {
	if m != nil {
		return m.VusdSupply
	}
	return ""
}

func (m *QueryVUSDTreasuryResponse) GetExchangeRate() string {
	if m != nil {
		return m.ExchangeRate
	}
	return ""
}

type QueryUserVUSDPositionRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryUserVUSDPositionRequest) Reset()         { *m = QueryUserVUSDPositionRequest{} }
func (m *QueryUserVUSDPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserVUSDPositionRequest) ProtoMessage()    {}
func (*QueryUserVUSDPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa94dac8954083c, []int{6}
}
func (m *QueryUserVUSDPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserVUSDPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserVUSDPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserVUSDPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserVUSDPositionRequest.Merge(m, src)
}
func (m *QueryUserVUSDPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserVUSDPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserVUSDPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserVUSDPositionRequest proto.InternalMessageInfo

func (m *QueryUserVUSDPositionRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryUserVUSDPositionResponse struct {
	VusdBalance     string `protobuf:"bytes,1,opt,name=vusd_balance,json=vusdBalance,proto3" json:"vusd_balance,omitempty"`
	SkillCollateral string `protobuf:"bytes,2,opt,name=skill_collateral,json=skillCollateral,proto3" json:"skill_collateral,omitempty"`
	HealthFactor    string `protobuf:"bytes,3,opt,name=health_factor,json=healthFactor,proto3" json:"health_factor,omitempty"`
	Position        string `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	Exists          bool   `protobuf:"varint,5,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *QueryUserVUSDPositionResponse) Reset()         { *m = QueryUserVUSDPositionResponse{} }
func (m *QueryUserVUSDPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserVUSDPositionResponse) ProtoMessage()    {}
func (*QueryUserVUSDPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa94dac8954083c, []int{7}
}
func (m *QueryUserVUSDPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserVUSDPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserVUSDPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserVUSDPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserVUSDPositionResponse.Merge(m, src)
}
func (m *QueryUserVUSDPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserVUSDPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserVUSDPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserVUSDPositionResponse proto.InternalMessageInfo

func (m *QueryUserVUSDPositionResponse) GetVusdBalance() string {
	if m != nil {
		return m.VusdBalance
	}
	return ""
}

func (m *QueryUserVUSDPositionResponse) GetSkillCollateral() string {
	if m != nil {
		return m.SkillCollateral
	}
	return ""
}

func (m *QueryUserVUSDPositionResponse) GetHealthFactor() string {
	if m != nil {
		return m.HealthFactor
	}
	return ""
}

func (m *QueryUserVUSDPositionResponse) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *QueryUserVUSDPositionResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "skillchain.skillchain.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "skillchain.skillchain.QueryParamsResponse")
	proto.RegisterType((*QueryTokenInfoRequest)(nil), "skillchain.skillchain.QueryTokenInfoRequest")
	proto.RegisterType((*QueryTokenInfoResponse)(nil), "skillchain.skillchain.QueryTokenInfoResponse")
	proto.RegisterType((*QueryVUSDTreasuryRequest)(nil), "skillchain.skillchain.QueryVUSDTreasuryRequest")
	proto.RegisterType((*QueryVUSDTreasuryResponse)(nil), "skillchain.skillchain.QueryVUSDTreasuryResponse")
	proto.RegisterType((*QueryUserVUSDPositionRequest)(nil), "skillchain.skillchain.QueryUserVUSDPositionRequest")
	proto.RegisterType((*QueryUserVUSDPositionResponse)(nil), "skillchain.skillchain.QueryUserVUSDPositionResponse")
}

func init() { proto.RegisterFile("skillchain/skillchain/query.proto", fileDescriptor_baa94dac8954083c) }

var fileDescriptor_baa94dac8954083c = []byte{
	// 825 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xb6, 0x8d, 0x6b, 0x3f, 0x3b, 0x22, 0x19, 0xda, 0xb2, 0xac, 0x6a, 0xc7, 0xde, 0x00,
	0x4a, 0x42, 0xeb, 0xa5, 0x0d, 0x08, 0x24, 0x2e, 0x10, 0x0a, 0x12, 0xb7, 0xb2, 0x6d, 0x40, 0xe2,
	0xb2, 0x9a, 0x5d, 0x4f, 0xed, 0x55, 0x77, 0x67, 0xb6, 0x33, 0xb3, 0xc5, 0x16, 0xe2, 0x82, 0x44,
	0x25, 0x6e, 0x48, 0xfd, 0x01, 0x5c, 0x39, 0x72, 0xe6, 0x07, 0xa0, 0x1e, 0x23, 0x71, 0xe1, 0x84,
	0x50, 0x82, 0xc4, 0xdf, 0x40, 0xfb, 0x76, 0xd6, 0x71, 0x82, 0x6d, 0xa5, 0x17, 0x6b, 0xe6, 0x9b,
	0xef, 0xbd, 0xf7, 0xbd, 0x79, 0xdf, 0xac, 0xa1, 0xaf, 0x1e, 0xc7, 0x49, 0x12, 0x8d, 0x69, 0xcc,
	0xbd, 0xb9, 0xe5, 0x93, 0x9c, 0xc9, 0xe9, 0x20, 0x93, 0x42, 0x0b, 0x72, 0xfd, 0x14, 0x1f, 0x9c,
	0x2e, 0x9d, 0x4d, 0x9a, 0xc6, 0x5c, 0x78, 0xf8, 0x5b, 0x32, 0x9d, 0x6b, 0x23, 0x31, 0x12, 0xb8,
	0xf4, 0x8a, 0x95, 0x41, 0x6f, 0x8e, 0x84, 0x18, 0x25, 0xcc, 0xa3, 0x59, 0xec, 0x51, 0xce, 0x85,
	0xa6, 0x3a, 0x16, 0x5c, 0x99, 0xd3, 0xbd, 0x48, 0xa8, 0x54, 0x28, 0x2f, 0xa4, 0x8a, 0x95, 0x65,
	0xbd, 0xa7, 0x77, 0x42, 0xa6, 0xe9, 0x1d, 0x2f, 0xa3, 0xa3, 0x98, 0x23, 0xd9, 0x70, 0xdd, 0xc5,
	0x62, 0x33, 0x2a, 0x69, 0x6a, 0xf2, 0xb9, 0xd7, 0x80, 0x7c, 0x51, 0x64, 0xb9, 0x8f, 0xa0, 0xcf,
	0x9e, 0xe4, 0x4c, 0x69, 0xf7, 0x2b, 0x78, 0xf5, 0x0c, 0xaa, 0x32, 0xc1, 0x15, 0x23, 0x1f, 0x41,
	0xbd, 0x0c, 0xb6, 0xad, 0x9e, 0xb5, 0xd3, 0xba, 0xdb, 0x19, 0x2c, 0xec, 0x75, 0x50, 0x86, 0x1d,
	0x34, 0x5f, 0xfc, 0xb5, 0x55, 0xfb, 0xe5, 0xdf, 0x5f, 0xf7, 0x2c, 0xdf, 0xc4, 0xb9, 0xaf, 0xc1,
	0x75, 0x4c, 0xfc, 0x50, 0x3c, 0x66, 0xfc, 0x73, 0xfe, 0x48, 0x54, 0x15, 0x7f, 0xbc, 0x0c, 0x37,
	0xce, 0x9f, 0x98, 0xaa, 0x04, 0xae, 0x70, 0x9a, 0x32, 0xac, 0xd9, 0xf4, 0x71, 0x4d, 0x6e, 0x40,
	0x5d, 0x4d, 0xd3, 0x50, 0x24, 0xf6, 0x25, 0x44, 0xcd, 0x8e, 0x38, 0xd0, 0x18, 0xb2, 0x28, 0x4e,
	0x69, 0xa2, 0xec, 0xcb, 0x3d, 0x6b, 0x67, 0xdd, 0x9f, 0xed, 0x49, 0x0f, 0x5a, 0x43, 0xa6, 0x22,
	0x19, 0x67, 0xc5, 0x1d, 0xd9, 0x57, 0x30, 0x70, 0x1e, 0x22, 0x7d, 0x68, 0x6b, 0xa1, 0x69, 0x12,
	0xa8, 0x3c, 0xcb, 0x92, 0xa9, 0xbd, 0x56, 0x52, 0x10, 0x7b, 0x80, 0x10, 0xb9, 0x0d, 0x24, 0x8a,
	0x65, 0x94, 0x27, 0x54, 0xc7, 0x7c, 0x54, 0x11, 0xeb, 0x48, 0xdc, 0x9c, 0x3b, 0x31, 0xf4, 0x6d,
	0x58, 0x0f, 0x73, 0xc9, 0xd9, 0x30, 0xa0, 0xa9, 0xc8, 0xb9, 0xb6, 0xaf, 0x22, 0xb3, 0x5d, 0x82,
	0x1f, 0x23, 0x46, 0x3a, 0x00, 0x29, 0x9d, 0x54, 0xb9, 0x1a, 0xc8, 0x68, 0xa6, 0x74, 0x62, 0x72,
	0xf4, 0x01, 0xe9, 0x01, 0xe3, 0x34, 0x4c, 0xd8, 0xd0, 0x6e, 0xf6, 0xac, 0x9d, 0x86, 0xdf, 0x2a,
	0xb0, 0x4f, 0x4b, 0x88, 0xbc, 0x0d, 0x9b, 0x78, 0xf3, 0xc1, 0x7c, 0x83, 0x80, 0x89, 0x36, 0xf0,
	0xe0, 0xde, 0x5c, 0x97, 0x5b, 0xd0, 0xfa, 0x86, 0x85, 0x2a, 0xd6, 0x2c, 0xc8, 0x65, 0x62, 0xb7,
	0x90, 0x06, 0x06, 0x3a, 0x94, 0x89, 0xeb, 0x80, 0x8d, 0xa3, 0xf8, 0xf2, 0xf0, 0xc1, 0xbd, 0x87,
	0x92, 0x51, 0x95, 0xcb, 0x69, 0x35, 0xa7, 0x67, 0x16, 0xbc, 0xbe, 0xe0, 0xd0, 0x8c, 0x6a, 0x1b,
	0xd6, 0xd1, 0x06, 0x41, 0x48, 0x13, 0xca, 0xa3, 0x6a, 0x66, 0x6d, 0x04, 0x0f, 0x4a, 0xac, 0xa8,
	0xff, 0x34, 0x57, 0xc3, 0xaa, 0xdf, 0x72, 0x80, 0x50, 0x40, 0xa7, 0x97, 0xc6, 0x26, 0xd1, 0x98,
	0xf2, 0x11, 0x0b, 0x24, 0xd5, 0x0c, 0x27, 0xd9, 0xf4, 0xdb, 0x15, 0xe8, 0x53, 0xcd, 0xdc, 0x0f,
	0xe0, 0x26, 0xea, 0x38, 0x54, 0x4c, 0x16, 0x5a, 0xee, 0x0b, 0x15, 0x17, 0xed, 0x19, 0xa1, 0xc4,
	0x86, 0xab, 0x74, 0x38, 0x94, 0x4c, 0x29, 0x23, 0xa2, 0xda, 0xba, 0xbf, 0x5b, 0xd0, 0x59, 0x12,
	0x6a, 0xda, 0xe8, 0x43, 0x1b, 0x15, 0x9e, 0xed, 0x02, 0x55, 0x57, 0x4d, 0xec, 0xc2, 0x46, 0xd9,
	0x69, 0x24, 0x92, 0x84, 0x6a, 0x26, 0x69, 0x65, 0xc5, 0x57, 0x10, 0xff, 0x64, 0x06, 0x17, 0xed,
	0x8c, 0x19, 0x4d, 0xf4, 0x38, 0x78, 0x44, 0x23, 0x2d, 0x64, 0xd5, 0x4e, 0x09, 0x7e, 0x86, 0x58,
	0x61, 0xdc, 0xcc, 0xc8, 0x30, 0xce, 0x9c, 0xed, 0x0b, 0xb3, 0xb3, 0x49, 0xac, 0xb4, 0x42, 0x43,
	0x36, 0x7c, 0xb3, 0xbb, 0xfb, 0xc3, 0x1a, 0xac, 0x61, 0x23, 0xe4, 0x99, 0x05, 0xf5, 0xf2, 0xd1,
	0x91, 0xdd, 0x25, 0x6f, 0xf2, 0xff, 0xaf, 0xdc, 0xd9, 0xbb, 0x08, 0xb5, 0xbc, 0x12, 0xf7, 0xcd,
	0xef, 0xff, 0xf8, 0xe7, 0xf9, 0xa5, 0x2d, 0xd2, 0xf1, 0x56, 0x7d, 0x54, 0xc8, 0x73, 0x0b, 0x9a,
	0xb3, 0x17, 0x4c, 0x6e, 0xad, 0x2a, 0x70, 0xfe, 0x13, 0xe0, 0xdc, 0xbe, 0x20, 0xdb, 0x28, 0xda,
	0x45, 0x45, 0xdb, 0xa4, 0xbf, 0x44, 0x91, 0x2e, 0x22, 0x82, 0xb8, 0xd0, 0xf1, 0xb3, 0x05, 0xed,
	0x79, 0xbf, 0x12, 0x6f, 0x55, 0xa9, 0x05, 0xb6, 0x77, 0xde, 0xb9, 0x78, 0x80, 0x91, 0x77, 0x0b,
	0xe5, 0xbd, 0x45, 0xde, 0x58, 0x22, 0x0f, 0x0d, 0xa6, 0x2b, 0x41, 0xbf, 0x59, 0xb0, 0x71, 0xde,
	0x8e, 0x64, 0x7f, 0x55, 0xd1, 0x25, 0xbe, 0x77, 0xde, 0x7d, 0xb9, 0x20, 0xa3, 0xf6, 0x43, 0x54,
	0xfb, 0x1e, 0xd9, 0x5f, 0xa2, 0x36, 0x57, 0x4c, 0x06, 0x28, 0xb9, 0x72, 0xa5, 0xf7, 0xad, 0x79,
	0x4f, 0xdf, 0x1d, 0xbc, 0xff, 0xe2, 0xb8, 0x6b, 0x1d, 0x1d, 0x77, 0xad, 0xbf, 0x8f, 0xbb, 0xd6,
	0x4f, 0x27, 0xdd, 0xda, 0xd1, 0x49, 0xb7, 0xf6, 0xe7, 0x49, 0xb7, 0xf6, 0x75, 0x67, 0x2e, 0xc5,
	0xe4, 0xcc, 0x70, 0xa6, 0x19, 0x53, 0x61, 0x1d, 0xff, 0x83, 0xf6, 0xff, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0x7b, 0xff, 0x07, 0xd8, 0x56, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	TokenInfo(ctx context.Context, in *QueryTokenInfoRequest, opts ...grpc.CallOption) (*QueryTokenInfoResponse, error)
	VUSDTreasury(ctx context.Context, in *QueryVUSDTreasuryRequest, opts ...grpc.CallOption) (*QueryVUSDTreasuryResponse, error)
	UserVUSDPosition(ctx context.Context, in *QueryUserVUSDPositionRequest, opts ...grpc.CallOption) (*QueryUserVUSDPositionResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/skillchain.skillchain.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenInfo(ctx context.Context, in *QueryTokenInfoRequest, opts ...grpc.CallOption) (*QueryTokenInfoResponse, error) {
	out := new(QueryTokenInfoResponse)
	err := c.cc.Invoke(ctx, "/skillchain.skillchain.Query/TokenInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VUSDTreasury(ctx context.Context, in *QueryVUSDTreasuryRequest, opts ...grpc.CallOption) (*QueryVUSDTreasuryResponse, error) {
	out := new(QueryVUSDTreasuryResponse)
	err := c.cc.Invoke(ctx, "/skillchain.skillchain.Query/VUSDTreasury", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserVUSDPosition(ctx context.Context, in *QueryUserVUSDPositionRequest, opts ...grpc.CallOption) (*QueryUserVUSDPositionResponse, error) {
	out := new(QueryUserVUSDPositionResponse)
	err := c.cc.Invoke(ctx, "/skillchain.skillchain.Query/UserVUSDPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	TokenInfo(context.Context, *QueryTokenInfoRequest) (*QueryTokenInfoResponse, error)
	VUSDTreasury(context.Context, *QueryVUSDTreasuryRequest) (*QueryVUSDTreasuryResponse, error)
	UserVUSDPosition(context.Context, *QueryUserVUSDPositionRequest) (*QueryUserVUSDPositionResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) TokenInfo(ctx context.Context, req *QueryTokenInfoRequest) (*QueryTokenInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenInfo not implemented")
}
func (*UnimplementedQueryServer) VUSDTreasury(ctx context.Context, req *QueryVUSDTreasuryRequest) (*QueryVUSDTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VUSDTreasury not implemented")
}
func (*UnimplementedQueryServer) UserVUSDPosition(ctx context.Context, req *QueryUserVUSDPositionRequest) (*QueryUserVUSDPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserVUSDPosition not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skillchain.skillchain.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skillchain.skillchain.Query/TokenInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenInfo(ctx, req.(*QueryTokenInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VUSDTreasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVUSDTreasuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VUSDTreasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skillchain.skillchain.Query/VUSDTreasury",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VUSDTreasury(ctx, req.(*QueryVUSDTreasuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserVUSDPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserVUSDPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserVUSDPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skillchain.skillchain.Query/UserVUSDPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserVUSDPosition(ctx, req.(*QueryUserVUSDPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "skillchain.skillchain.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "TokenInfo",
			Handler:    _Query_TokenInfo_Handler,
		},
		{
			MethodName: "VUSDTreasury",
			Handler:    _Query_VUSDTreasury_Handler,
		},
		{
			MethodName: "UserVUSDPosition",
			Handler:    _Query_UserVUSDPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skillchain/skillchain/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTokenInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTokenInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WebsiteUrl) > 0 {
		i -= len(m.WebsiteUrl)
		copy(dAtA[i:], m.WebsiteUrl)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WebsiteUrl)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ChainDescription) > 0 {
		i -= len(m.ChainDescription)
		copy(dAtA[i:], m.ChainDescription)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainDescription)))
		i--
		dAtA[i] = 0x52
	}
	if m.BurnEnabled {
		i--
		if m.BurnEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.MaxSupply) > 0 {
		i -= len(m.MaxSupply)
		copy(dAtA[i:], m.MaxSupply)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MaxSupply)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BurnedAmount) > 0 {
		i -= len(m.BurnedAmount)
		copy(dAtA[i:], m.BurnedAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BurnedAmount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CirculatingSupply) > 0 {
		i -= len(m.CirculatingSupply)
		copy(dAtA[i:], m.CirculatingSupply)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CirculatingSupply)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TotalSupply) > 0 {
		i -= len(m.TotalSupply)
		copy(dAtA[i:], m.TotalSupply)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalSupply)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if m.Decimals != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVUSDTreasuryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVUSDTreasuryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVUSDTreasuryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryVUSDTreasuryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVUSDTreasuryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVUSDTreasuryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExchangeRate) > 0 {
		i -= len(m.ExchangeRate)
		copy(dAtA[i:], m.ExchangeRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExchangeRate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VusdSupply) > 0 {
		i -= len(m.VusdSupply)
		copy(dAtA[i:], m.VusdSupply)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VusdSupply)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SkillBalance) > 0 {
		i -= len(m.SkillBalance)
		copy(dAtA[i:], m.SkillBalance)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SkillBalance)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserVUSDPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserVUSDPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserVUSDPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserVUSDPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserVUSDPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserVUSDPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HealthFactor) > 0 {
		i -= len(m.HealthFactor)
		copy(dAtA[i:], m.HealthFactor)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.HealthFactor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SkillCollateral) > 0 {
		i -= len(m.SkillCollateral)
		copy(dAtA[i:], m.SkillCollateral)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SkillCollateral)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VusdBalance) > 0 {
		i -= len(m.VusdBalance)
		copy(dAtA[i:], m.VusdBalance)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VusdBalance)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokenInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTokenInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovQuery(uint64(m.Decimals))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalSupply)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CirculatingSupply)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BurnedAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MaxSupply)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BurnEnabled {
		n += 2
	}
	l = len(m.ChainDescription)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.WebsiteUrl)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVUSDTreasuryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryVUSDTreasuryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SkillBalance)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VusdSupply)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ExchangeRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserVUSDPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserVUSDPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VusdBalance)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SkillCollateral)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.HealthFactor)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Exists {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CirculatingSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CirculatingSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnedAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnEnabled = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsiteUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVUSDTreasuryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVUSDTreasuryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVUSDTreasuryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVUSDTreasuryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVUSDTreasuryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVUSDTreasuryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkillBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VusdSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VusdSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserVUSDPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserVUSDPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserVUSDPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserVUSDPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserVUSDPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserVUSDPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VusdBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VusdBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillCollateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkillCollateral = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthFactor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
