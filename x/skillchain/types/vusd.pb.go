// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: skillchain/skillchain/vusd.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VUSDTreasury tracks the global state of the vUSD system
type VUSDTreasury struct {
	// Total SKILL tokens locked as collateral
	TotalSkillLocked cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total_skill_locked,json=totalSkillLocked,proto3,customtype=cosmossdk.io/math.Int" json:"total_skill_locked"`
	// Total vUSD tokens in circulation
	TotalVusdSupply cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=total_vusd_supply,json=totalVusdSupply,proto3,customtype=cosmossdk.io/math.Int" json:"total_vusd_supply"`
	// Current SKILL/USD price (mock for now)
	CurrentSkillPrice string `protobuf:"bytes,3,opt,name=current_skill_price,json=currentSkillPrice,proto3" json:"current_skill_price,omitempty"`
	// Last price update timestamp
	LastUpdate int64 `protobuf:"varint,4,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	// Global collateral ratio
	GlobalCollateralRatio string `protobuf:"bytes,5,opt,name=global_collateral_ratio,json=globalCollateralRatio,proto3" json:"global_collateral_ratio,omitempty"`
}

func (m *VUSDTreasury) Reset()         { *m = VUSDTreasury{} }
func (m *VUSDTreasury) String() string { return proto.CompactTextString(m) }
func (*VUSDTreasury) ProtoMessage()    {}
func (*VUSDTreasury) Descriptor() ([]byte, []int) {
	return fileDescriptor_0714caa4df2284c5, []int{0}
}
func (m *VUSDTreasury) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VUSDTreasury) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VUSDTreasury.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VUSDTreasury) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VUSDTreasury.Merge(m, src)
}
func (m *VUSDTreasury) XXX_Size() int {
	return m.Size()
}
func (m *VUSDTreasury) XXX_DiscardUnknown() {
	xxx_messageInfo_VUSDTreasury.DiscardUnknown(m)
}

var xxx_messageInfo_VUSDTreasury proto.InternalMessageInfo

func (m *VUSDTreasury) GetCurrentSkillPrice() string {
	if m != nil {
		return m.CurrentSkillPrice
	}
	return ""
}

func (m *VUSDTreasury) GetLastUpdate() int64 {
	if m != nil {
		return m.LastUpdate
	}
	return 0
}

func (m *VUSDTreasury) GetGlobalCollateralRatio() string {
	if m != nil {
		return m.GlobalCollateralRatio
	}
	return ""
}

// UserVUSDPosition tracks individual user's collateral and debt
type UserVUSDPosition struct {
	// User's address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// SKILL tokens locked as collateral
	SkillCollateral cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=skill_collateral,json=skillCollateral,proto3,customtype=cosmossdk.io/math.Int" json:"skill_collateral"`
	// vUSD tokens minted (debt)
	VusdDebt cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=vusd_debt,json=vusdDebt,proto3,customtype=cosmossdk.io/math.Int" json:"vusd_debt"`
	// Individual collateral ratio
	CollateralRatio string `protobuf:"bytes,4,opt,name=collateral_ratio,json=collateralRatio,proto3" json:"collateral_ratio,omitempty"`
	// Position creation timestamp
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt int64 `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *UserVUSDPosition) Reset()         { *m = UserVUSDPosition{} }
func (m *UserVUSDPosition) String() string { return proto.CompactTextString(m) }
func (*UserVUSDPosition) ProtoMessage()    {}
func (*UserVUSDPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_0714caa4df2284c5, []int{1}
}
func (m *UserVUSDPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserVUSDPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserVUSDPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserVUSDPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserVUSDPosition.Merge(m, src)
}
func (m *UserVUSDPosition) XXX_Size() int {
	return m.Size()
}
func (m *UserVUSDPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_UserVUSDPosition.DiscardUnknown(m)
}

var xxx_messageInfo_UserVUSDPosition proto.InternalMessageInfo

func (m *UserVUSDPosition) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserVUSDPosition) GetCollateralRatio() string {
	if m != nil {
		return m.CollateralRatio
	}
	return ""
}

func (m *UserVUSDPosition) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *UserVUSDPosition) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*VUSDTreasury)(nil), "skillchain.skillchain.VUSDTreasury")
	proto.RegisterType((*UserVUSDPosition)(nil), "skillchain.skillchain.UserVUSDPosition")
}

func init() { proto.RegisterFile("skillchain/skillchain/vusd.proto", fileDescriptor_0714caa4df2284c5) }

var fileDescriptor_0714caa4df2284c5 = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x6e, 0xda, 0x31, 0xa8, 0x41, 0x5a, 0x6a, 0xa8, 0x88, 0x26, 0x35, 0xad, 0x76, 0x1a, 0x97,
	0x44, 0x13, 0x12, 0x48, 0xdc, 0x36, 0x76, 0x60, 0x82, 0xc3, 0x94, 0xd2, 0x1d, 0xb8, 0x44, 0x8e,
	0x6d, 0x75, 0x56, 0xdd, 0x38, 0xb2, 0x5f, 0x26, 0xfa, 0x2f, 0xb8, 0xf3, 0x23, 0xf8, 0x1b, 0x3b,
	0xee, 0x88, 0x38, 0x4c, 0xa8, 0xfd, 0x23, 0xc8, 0x76, 0x20, 0x45, 0x1c, 0xe8, 0x25, 0x7a, 0xf9,
	0x3e, 0x7f, 0xdf, 0x7b, 0xef, 0xd3, 0x43, 0x13, 0xb3, 0x10, 0x52, 0xd2, 0x6b, 0x22, 0xca, 0x74,
	0xab, 0xbc, 0xa9, 0x0d, 0x4b, 0x2a, 0xad, 0x40, 0xe1, 0x61, 0x0b, 0x27, 0x6d, 0x79, 0x38, 0x20,
	0x4b, 0x51, 0xaa, 0xd4, 0x7d, 0xfd, 0xcb, 0xc3, 0x67, 0x73, 0x35, 0x57, 0xae, 0x4c, 0x6d, 0xd5,
	0xa0, 0x31, 0x55, 0x66, 0xa9, 0x4c, 0x5a, 0x10, 0xc3, 0xd3, 0x9b, 0x93, 0x82, 0x03, 0x39, 0x49,
	0xa9, 0x12, 0xa5, 0xe7, 0x8f, 0xbe, 0x75, 0xd1, 0x93, 0xab, 0xd9, 0xf4, 0xfc, 0xa3, 0xe6, 0xc4,
	0xd4, 0x7a, 0x85, 0xdf, 0x23, 0x0c, 0x0a, 0x88, 0xcc, 0x5d, 0xb7, 0x5c, 0x2a, 0xba, 0xe0, 0x2c,
	0x0a, 0x26, 0xc1, 0x71, 0xff, 0x6c, 0x74, 0x7b, 0x3f, 0xee, 0xfc, 0xb8, 0x1f, 0x0f, 0xbd, 0xa9,
	0x61, 0x8b, 0x44, 0xa8, 0x74, 0x49, 0xe0, 0x3a, 0xb9, 0x28, 0x21, 0x0b, 0x9d, 0x70, 0x6a, 0x75,
	0x1f, 0x9c, 0x0c, 0x5f, 0xa0, 0x81, 0x37, 0xb3, 0x1b, 0xe5, 0xa6, 0xae, 0x2a, 0xb9, 0x8a, 0xba,
	0xbb, 0x78, 0x1d, 0x38, 0xdd, 0x55, 0x6d, 0xd8, 0xd4, 0xa9, 0x70, 0x82, 0x9e, 0xd2, 0x5a, 0x6b,
	0x5e, 0x42, 0x33, 0x59, 0xa5, 0x05, 0xe5, 0x51, 0xcf, 0x9a, 0x65, 0x83, 0x86, 0x72, 0xbd, 0x2f,
	0x2d, 0x81, 0xc7, 0xe8, 0xb1, 0x24, 0x06, 0xf2, 0xba, 0x62, 0x04, 0x78, 0xb4, 0x37, 0x09, 0x8e,
	0x7b, 0x19, 0xb2, 0xd0, 0xcc, 0x21, 0xf8, 0x15, 0x7a, 0x3e, 0x97, 0xaa, 0x20, 0x32, 0xa7, 0x4a,
	0x4a, 0x02, 0x5c, 0x13, 0x99, 0x6b, 0x02, 0x42, 0x45, 0x0f, 0x9c, 0xe9, 0xd0, 0xd3, 0x6f, 0xff,
	0xb0, 0x99, 0x25, 0x8f, 0xbe, 0x76, 0x51, 0x38, 0x33, 0x5c, 0xdb, 0xd4, 0x2e, 0x95, 0x11, 0x20,
	0x54, 0x89, 0x23, 0xf4, 0x90, 0x30, 0xa6, 0xb9, 0x31, 0x3e, 0xaa, 0xec, 0xf7, 0x2f, 0x7e, 0x87,
	0x42, 0x3f, 0x6f, 0xdb, 0x65, 0xc7, 0x04, 0x9c, 0xac, 0xed, 0x8e, 0xdf, 0xa0, 0xbe, 0x8b, 0x91,
	0xf1, 0x02, 0xfc, 0xde, 0xff, 0xb3, 0x78, 0x64, 0xdf, 0x9f, 0xf3, 0x02, 0xf0, 0x0b, 0x14, 0xfe,
	0xb3, 0xe5, 0x9e, 0x1b, 0xf4, 0x80, 0xfe, 0xbd, 0x1f, 0x1e, 0x21, 0x44, 0x35, 0x27, 0xc0, 0x59,
	0x4e, 0xc0, 0x45, 0xd1, 0xcb, 0xfa, 0x0d, 0x72, 0x0a, 0x96, 0xf6, 0x91, 0x3a, 0x7a, 0xdf, 0xd3,
	0x0d, 0x72, 0x0a, 0x67, 0xaf, 0x6f, 0xd7, 0x71, 0x70, 0xb7, 0x8e, 0x83, 0x9f, 0xeb, 0x38, 0xf8,
	0xb2, 0x89, 0x3b, 0x77, 0x9b, 0xb8, 0xf3, 0x7d, 0x13, 0x77, 0x3e, 0x8d, 0xb6, 0x0e, 0xfc, 0xf3,
	0xf6, 0xb5, 0xc3, 0xaa, 0xe2, 0xa6, 0xd8, 0x77, 0xf7, 0xf8, 0xf2, 0x57, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x7a, 0x8c, 0x87, 0x47, 0x13, 0x03, 0x00, 0x00,
}

func (m *VUSDTreasury) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VUSDTreasury) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VUSDTreasury) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GlobalCollateralRatio) > 0 {
		i -= len(m.GlobalCollateralRatio)
		copy(dAtA[i:], m.GlobalCollateralRatio)
		i = encodeVarintVusd(dAtA, i, uint64(len(m.GlobalCollateralRatio)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LastUpdate != 0 {
		i = encodeVarintVusd(dAtA, i, uint64(m.LastUpdate))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CurrentSkillPrice) > 0 {
		i -= len(m.CurrentSkillPrice)
		copy(dAtA[i:], m.CurrentSkillPrice)
		i = encodeVarintVusd(dAtA, i, uint64(len(m.CurrentSkillPrice)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.TotalVusdSupply.Size()
		i -= size
		if _, err := m.TotalVusdSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVusd(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalSkillLocked.Size()
		i -= size
		if _, err := m.TotalSkillLocked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVusd(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UserVUSDPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserVUSDPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserVUSDPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != 0 {
		i = encodeVarintVusd(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.CreatedAt != 0 {
		i = encodeVarintVusd(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CollateralRatio) > 0 {
		i -= len(m.CollateralRatio)
		copy(dAtA[i:], m.CollateralRatio)
		i = encodeVarintVusd(dAtA, i, uint64(len(m.CollateralRatio)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.VusdDebt.Size()
		i -= size
		if _, err := m.VusdDebt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVusd(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.SkillCollateral.Size()
		i -= size
		if _, err := m.SkillCollateral.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVusd(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintVusd(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVusd(dAtA []byte, offset int, v uint64) int {
	offset -= sovVusd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VUSDTreasury) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalSkillLocked.Size()
	n += 1 + l + sovVusd(uint64(l))
	l = m.TotalVusdSupply.Size()
	n += 1 + l + sovVusd(uint64(l))
	l = len(m.CurrentSkillPrice)
	if l > 0 {
		n += 1 + l + sovVusd(uint64(l))
	}
	if m.LastUpdate != 0 {
		n += 1 + sovVusd(uint64(m.LastUpdate))
	}
	l = len(m.GlobalCollateralRatio)
	if l > 0 {
		n += 1 + l + sovVusd(uint64(l))
	}
	return n
}

func (m *UserVUSDPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovVusd(uint64(l))
	}
	l = m.SkillCollateral.Size()
	n += 1 + l + sovVusd(uint64(l))
	l = m.VusdDebt.Size()
	n += 1 + l + sovVusd(uint64(l))
	l = len(m.CollateralRatio)
	if l > 0 {
		n += 1 + l + sovVusd(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovVusd(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovVusd(uint64(m.UpdatedAt))
	}
	return n
}

func sovVusd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVusd(x uint64) (n int) {
	return sovVusd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VUSDTreasury) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVusd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VUSDTreasury: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VUSDTreasury: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSkillLocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVusd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVusd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVusd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSkillLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVusdSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVusd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVusd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVusd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalVusdSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSkillPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVusd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVusd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVusd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentSkillPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdate", wireType)
			}
			m.LastUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVusd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalCollateralRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVusd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVusd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVusd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalCollateralRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVusd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVusd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserVUSDPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVusd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserVUSDPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserVUSDPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVusd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVusd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVusd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillCollateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVusd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVusd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVusd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SkillCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VusdDebt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVusd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVusd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVusd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VusdDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVusd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVusd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVusd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVusd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVusd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVusd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVusd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVusd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVusd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVusd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVusd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVusd
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVusd
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVusd
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVusd        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVusd          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVusd = fmt.Errorf("proto: unexpected end of group")
)
