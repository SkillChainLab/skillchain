// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: skillchain/marketplace/tx.proto

package marketplace

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName      = "/skillchain.marketplace.Msg/UpdateParams"
	Msg_CreateJobPosting_FullMethodName  = "/skillchain.marketplace.Msg/CreateJobPosting"
	Msg_UpdateJobPosting_FullMethodName  = "/skillchain.marketplace.Msg/UpdateJobPosting"
	Msg_DeleteJobPosting_FullMethodName  = "/skillchain.marketplace.Msg/DeleteJobPosting"
	Msg_CreateProposal_FullMethodName    = "/skillchain.marketplace.Msg/CreateProposal"
	Msg_UpdateProposal_FullMethodName    = "/skillchain.marketplace.Msg/UpdateProposal"
	Msg_DeleteProposal_FullMethodName    = "/skillchain.marketplace.Msg/DeleteProposal"
	Msg_CreateProject_FullMethodName     = "/skillchain.marketplace.Msg/CreateProject"
	Msg_UpdateProject_FullMethodName     = "/skillchain.marketplace.Msg/UpdateProject"
	Msg_DeleteProject_FullMethodName     = "/skillchain.marketplace.Msg/DeleteProject"
	Msg_CreateMilestone_FullMethodName   = "/skillchain.marketplace.Msg/CreateMilestone"
	Msg_UpdateMilestone_FullMethodName   = "/skillchain.marketplace.Msg/UpdateMilestone"
	Msg_DeleteMilestone_FullMethodName   = "/skillchain.marketplace.Msg/DeleteMilestone"
	Msg_AcceptProposal_FullMethodName    = "/skillchain.marketplace.Msg/AcceptProposal"
	Msg_CompleteMilestone_FullMethodName = "/skillchain.marketplace.Msg/CompleteMilestone"
	Msg_ReleasePayment_FullMethodName    = "/skillchain.marketplace.Msg/ReleasePayment"
	Msg_DisputeProject_FullMethodName    = "/skillchain.marketplace.Msg/DisputeProject"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateJobPosting(ctx context.Context, in *MsgCreateJobPosting, opts ...grpc.CallOption) (*MsgCreateJobPostingResponse, error)
	UpdateJobPosting(ctx context.Context, in *MsgUpdateJobPosting, opts ...grpc.CallOption) (*MsgUpdateJobPostingResponse, error)
	DeleteJobPosting(ctx context.Context, in *MsgDeleteJobPosting, opts ...grpc.CallOption) (*MsgDeleteJobPostingResponse, error)
	CreateProposal(ctx context.Context, in *MsgCreateProposal, opts ...grpc.CallOption) (*MsgCreateProposalResponse, error)
	UpdateProposal(ctx context.Context, in *MsgUpdateProposal, opts ...grpc.CallOption) (*MsgUpdateProposalResponse, error)
	DeleteProposal(ctx context.Context, in *MsgDeleteProposal, opts ...grpc.CallOption) (*MsgDeleteProposalResponse, error)
	CreateProject(ctx context.Context, in *MsgCreateProject, opts ...grpc.CallOption) (*MsgCreateProjectResponse, error)
	UpdateProject(ctx context.Context, in *MsgUpdateProject, opts ...grpc.CallOption) (*MsgUpdateProjectResponse, error)
	DeleteProject(ctx context.Context, in *MsgDeleteProject, opts ...grpc.CallOption) (*MsgDeleteProjectResponse, error)
	CreateMilestone(ctx context.Context, in *MsgCreateMilestone, opts ...grpc.CallOption) (*MsgCreateMilestoneResponse, error)
	UpdateMilestone(ctx context.Context, in *MsgUpdateMilestone, opts ...grpc.CallOption) (*MsgUpdateMilestoneResponse, error)
	DeleteMilestone(ctx context.Context, in *MsgDeleteMilestone, opts ...grpc.CallOption) (*MsgDeleteMilestoneResponse, error)
	AcceptProposal(ctx context.Context, in *MsgAcceptProposal, opts ...grpc.CallOption) (*MsgAcceptProposalResponse, error)
	CompleteMilestone(ctx context.Context, in *MsgCompleteMilestone, opts ...grpc.CallOption) (*MsgCompleteMilestoneResponse, error)
	ReleasePayment(ctx context.Context, in *MsgReleasePayment, opts ...grpc.CallOption) (*MsgReleasePaymentResponse, error)
	DisputeProject(ctx context.Context, in *MsgDisputeProject, opts ...grpc.CallOption) (*MsgDisputeProjectResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateJobPosting(ctx context.Context, in *MsgCreateJobPosting, opts ...grpc.CallOption) (*MsgCreateJobPostingResponse, error) {
	out := new(MsgCreateJobPostingResponse)
	err := c.cc.Invoke(ctx, Msg_CreateJobPosting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateJobPosting(ctx context.Context, in *MsgUpdateJobPosting, opts ...grpc.CallOption) (*MsgUpdateJobPostingResponse, error) {
	out := new(MsgUpdateJobPostingResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateJobPosting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteJobPosting(ctx context.Context, in *MsgDeleteJobPosting, opts ...grpc.CallOption) (*MsgDeleteJobPostingResponse, error) {
	out := new(MsgDeleteJobPostingResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteJobPosting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateProposal(ctx context.Context, in *MsgCreateProposal, opts ...grpc.CallOption) (*MsgCreateProposalResponse, error) {
	out := new(MsgCreateProposalResponse)
	err := c.cc.Invoke(ctx, Msg_CreateProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateProposal(ctx context.Context, in *MsgUpdateProposal, opts ...grpc.CallOption) (*MsgUpdateProposalResponse, error) {
	out := new(MsgUpdateProposalResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteProposal(ctx context.Context, in *MsgDeleteProposal, opts ...grpc.CallOption) (*MsgDeleteProposalResponse, error) {
	out := new(MsgDeleteProposalResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateProject(ctx context.Context, in *MsgCreateProject, opts ...grpc.CallOption) (*MsgCreateProjectResponse, error) {
	out := new(MsgCreateProjectResponse)
	err := c.cc.Invoke(ctx, Msg_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateProject(ctx context.Context, in *MsgUpdateProject, opts ...grpc.CallOption) (*MsgUpdateProjectResponse, error) {
	out := new(MsgUpdateProjectResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteProject(ctx context.Context, in *MsgDeleteProject, opts ...grpc.CallOption) (*MsgDeleteProjectResponse, error) {
	out := new(MsgDeleteProjectResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMilestone(ctx context.Context, in *MsgCreateMilestone, opts ...grpc.CallOption) (*MsgCreateMilestoneResponse, error) {
	out := new(MsgCreateMilestoneResponse)
	err := c.cc.Invoke(ctx, Msg_CreateMilestone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMilestone(ctx context.Context, in *MsgUpdateMilestone, opts ...grpc.CallOption) (*MsgUpdateMilestoneResponse, error) {
	out := new(MsgUpdateMilestoneResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateMilestone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteMilestone(ctx context.Context, in *MsgDeleteMilestone, opts ...grpc.CallOption) (*MsgDeleteMilestoneResponse, error) {
	out := new(MsgDeleteMilestoneResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteMilestone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AcceptProposal(ctx context.Context, in *MsgAcceptProposal, opts ...grpc.CallOption) (*MsgAcceptProposalResponse, error) {
	out := new(MsgAcceptProposalResponse)
	err := c.cc.Invoke(ctx, Msg_AcceptProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CompleteMilestone(ctx context.Context, in *MsgCompleteMilestone, opts ...grpc.CallOption) (*MsgCompleteMilestoneResponse, error) {
	out := new(MsgCompleteMilestoneResponse)
	err := c.cc.Invoke(ctx, Msg_CompleteMilestone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReleasePayment(ctx context.Context, in *MsgReleasePayment, opts ...grpc.CallOption) (*MsgReleasePaymentResponse, error) {
	out := new(MsgReleasePaymentResponse)
	err := c.cc.Invoke(ctx, Msg_ReleasePayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DisputeProject(ctx context.Context, in *MsgDisputeProject, opts ...grpc.CallOption) (*MsgDisputeProjectResponse, error) {
	out := new(MsgDisputeProjectResponse)
	err := c.cc.Invoke(ctx, Msg_DisputeProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateJobPosting(context.Context, *MsgCreateJobPosting) (*MsgCreateJobPostingResponse, error)
	UpdateJobPosting(context.Context, *MsgUpdateJobPosting) (*MsgUpdateJobPostingResponse, error)
	DeleteJobPosting(context.Context, *MsgDeleteJobPosting) (*MsgDeleteJobPostingResponse, error)
	CreateProposal(context.Context, *MsgCreateProposal) (*MsgCreateProposalResponse, error)
	UpdateProposal(context.Context, *MsgUpdateProposal) (*MsgUpdateProposalResponse, error)
	DeleteProposal(context.Context, *MsgDeleteProposal) (*MsgDeleteProposalResponse, error)
	CreateProject(context.Context, *MsgCreateProject) (*MsgCreateProjectResponse, error)
	UpdateProject(context.Context, *MsgUpdateProject) (*MsgUpdateProjectResponse, error)
	DeleteProject(context.Context, *MsgDeleteProject) (*MsgDeleteProjectResponse, error)
	CreateMilestone(context.Context, *MsgCreateMilestone) (*MsgCreateMilestoneResponse, error)
	UpdateMilestone(context.Context, *MsgUpdateMilestone) (*MsgUpdateMilestoneResponse, error)
	DeleteMilestone(context.Context, *MsgDeleteMilestone) (*MsgDeleteMilestoneResponse, error)
	AcceptProposal(context.Context, *MsgAcceptProposal) (*MsgAcceptProposalResponse, error)
	CompleteMilestone(context.Context, *MsgCompleteMilestone) (*MsgCompleteMilestoneResponse, error)
	ReleasePayment(context.Context, *MsgReleasePayment) (*MsgReleasePaymentResponse, error)
	DisputeProject(context.Context, *MsgDisputeProject) (*MsgDisputeProjectResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateJobPosting(context.Context, *MsgCreateJobPosting) (*MsgCreateJobPostingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobPosting not implemented")
}
func (UnimplementedMsgServer) UpdateJobPosting(context.Context, *MsgUpdateJobPosting) (*MsgUpdateJobPostingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobPosting not implemented")
}
func (UnimplementedMsgServer) DeleteJobPosting(context.Context, *MsgDeleteJobPosting) (*MsgDeleteJobPostingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobPosting not implemented")
}
func (UnimplementedMsgServer) CreateProposal(context.Context, *MsgCreateProposal) (*MsgCreateProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProposal not implemented")
}
func (UnimplementedMsgServer) UpdateProposal(context.Context, *MsgUpdateProposal) (*MsgUpdateProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProposal not implemented")
}
func (UnimplementedMsgServer) DeleteProposal(context.Context, *MsgDeleteProposal) (*MsgDeleteProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProposal not implemented")
}
func (UnimplementedMsgServer) CreateProject(context.Context, *MsgCreateProject) (*MsgCreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedMsgServer) UpdateProject(context.Context, *MsgUpdateProject) (*MsgUpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedMsgServer) DeleteProject(context.Context, *MsgDeleteProject) (*MsgDeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedMsgServer) CreateMilestone(context.Context, *MsgCreateMilestone) (*MsgCreateMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMilestone not implemented")
}
func (UnimplementedMsgServer) UpdateMilestone(context.Context, *MsgUpdateMilestone) (*MsgUpdateMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMilestone not implemented")
}
func (UnimplementedMsgServer) DeleteMilestone(context.Context, *MsgDeleteMilestone) (*MsgDeleteMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMilestone not implemented")
}
func (UnimplementedMsgServer) AcceptProposal(context.Context, *MsgAcceptProposal) (*MsgAcceptProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptProposal not implemented")
}
func (UnimplementedMsgServer) CompleteMilestone(context.Context, *MsgCompleteMilestone) (*MsgCompleteMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMilestone not implemented")
}
func (UnimplementedMsgServer) ReleasePayment(context.Context, *MsgReleasePayment) (*MsgReleasePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePayment not implemented")
}
func (UnimplementedMsgServer) DisputeProject(context.Context, *MsgDisputeProject) (*MsgDisputeProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisputeProject not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateJobPosting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateJobPosting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateJobPosting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateJobPosting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateJobPosting(ctx, req.(*MsgCreateJobPosting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateJobPosting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateJobPosting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateJobPosting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateJobPosting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateJobPosting(ctx, req.(*MsgUpdateJobPosting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteJobPosting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteJobPosting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteJobPosting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteJobPosting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteJobPosting(ctx, req.(*MsgDeleteJobPosting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateProposal(ctx, req.(*MsgCreateProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateProposal(ctx, req.(*MsgUpdateProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteProposal(ctx, req.(*MsgDeleteProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateProject(ctx, req.(*MsgCreateProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateProject(ctx, req.(*MsgUpdateProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteProject(ctx, req.(*MsgDeleteProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMilestone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateMilestone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMilestone(ctx, req.(*MsgCreateMilestone))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMilestone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateMilestone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMilestone(ctx, req.(*MsgUpdateMilestone))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteMilestone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteMilestone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteMilestone(ctx, req.(*MsgDeleteMilestone))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AcceptProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AcceptProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AcceptProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AcceptProposal(ctx, req.(*MsgAcceptProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CompleteMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCompleteMilestone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CompleteMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CompleteMilestone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CompleteMilestone(ctx, req.(*MsgCompleteMilestone))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReleasePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReleasePayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReleasePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ReleasePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReleasePayment(ctx, req.(*MsgReleasePayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DisputeProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDisputeProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DisputeProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DisputeProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DisputeProject(ctx, req.(*MsgDisputeProject))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skillchain.marketplace.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateJobPosting",
			Handler:    _Msg_CreateJobPosting_Handler,
		},
		{
			MethodName: "UpdateJobPosting",
			Handler:    _Msg_UpdateJobPosting_Handler,
		},
		{
			MethodName: "DeleteJobPosting",
			Handler:    _Msg_DeleteJobPosting_Handler,
		},
		{
			MethodName: "CreateProposal",
			Handler:    _Msg_CreateProposal_Handler,
		},
		{
			MethodName: "UpdateProposal",
			Handler:    _Msg_UpdateProposal_Handler,
		},
		{
			MethodName: "DeleteProposal",
			Handler:    _Msg_DeleteProposal_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _Msg_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _Msg_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _Msg_DeleteProject_Handler,
		},
		{
			MethodName: "CreateMilestone",
			Handler:    _Msg_CreateMilestone_Handler,
		},
		{
			MethodName: "UpdateMilestone",
			Handler:    _Msg_UpdateMilestone_Handler,
		},
		{
			MethodName: "DeleteMilestone",
			Handler:    _Msg_DeleteMilestone_Handler,
		},
		{
			MethodName: "AcceptProposal",
			Handler:    _Msg_AcceptProposal_Handler,
		},
		{
			MethodName: "CompleteMilestone",
			Handler:    _Msg_CompleteMilestone_Handler,
		},
		{
			MethodName: "ReleasePayment",
			Handler:    _Msg_ReleasePayment_Handler,
		},
		{
			MethodName: "DisputeProject",
			Handler:    _Msg_DisputeProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skillchain/marketplace/tx.proto",
}
