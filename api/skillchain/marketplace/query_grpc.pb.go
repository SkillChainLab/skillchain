// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: skillchain/marketplace/query.proto

package marketplace

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName          = "/skillchain.marketplace.Query/Params"
	Query_JobPosting_FullMethodName      = "/skillchain.marketplace.Query/JobPosting"
	Query_JobPostingAll_FullMethodName   = "/skillchain.marketplace.Query/JobPostingAll"
	Query_Proposal_FullMethodName        = "/skillchain.marketplace.Query/Proposal"
	Query_ProposalAll_FullMethodName     = "/skillchain.marketplace.Query/ProposalAll"
	Query_Project_FullMethodName         = "/skillchain.marketplace.Query/Project"
	Query_ProjectAll_FullMethodName      = "/skillchain.marketplace.Query/ProjectAll"
	Query_Milestone_FullMethodName       = "/skillchain.marketplace.Query/Milestone"
	Query_MilestoneAll_FullMethodName    = "/skillchain.marketplace.Query/MilestoneAll"
	Query_ListJobPostings_FullMethodName = "/skillchain.marketplace.Query/ListJobPostings"
	Query_ListProposals_FullMethodName   = "/skillchain.marketplace.Query/ListProposals"
	Query_ListProjects_FullMethodName    = "/skillchain.marketplace.Query/ListProjects"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of JobPosting items.
	JobPosting(ctx context.Context, in *QueryGetJobPostingRequest, opts ...grpc.CallOption) (*QueryGetJobPostingResponse, error)
	JobPostingAll(ctx context.Context, in *QueryAllJobPostingRequest, opts ...grpc.CallOption) (*QueryAllJobPostingResponse, error)
	// Queries a list of Proposal items.
	Proposal(ctx context.Context, in *QueryGetProposalRequest, opts ...grpc.CallOption) (*QueryGetProposalResponse, error)
	ProposalAll(ctx context.Context, in *QueryAllProposalRequest, opts ...grpc.CallOption) (*QueryAllProposalResponse, error)
	// Queries a list of Project items.
	Project(ctx context.Context, in *QueryGetProjectRequest, opts ...grpc.CallOption) (*QueryGetProjectResponse, error)
	ProjectAll(ctx context.Context, in *QueryAllProjectRequest, opts ...grpc.CallOption) (*QueryAllProjectResponse, error)
	// Queries a list of Milestone items.
	Milestone(ctx context.Context, in *QueryGetMilestoneRequest, opts ...grpc.CallOption) (*QueryGetMilestoneResponse, error)
	MilestoneAll(ctx context.Context, in *QueryAllMilestoneRequest, opts ...grpc.CallOption) (*QueryAllMilestoneResponse, error)
	// Queries a list of ListJobPostings items.
	ListJobPostings(ctx context.Context, in *QueryListJobPostingsRequest, opts ...grpc.CallOption) (*QueryListJobPostingsResponse, error)
	// Queries a list of ListProposals items.
	ListProposals(ctx context.Context, in *QueryListProposalsRequest, opts ...grpc.CallOption) (*QueryListProposalsResponse, error)
	// Queries a list of ListProjects items.
	ListProjects(ctx context.Context, in *QueryListProjectsRequest, opts ...grpc.CallOption) (*QueryListProjectsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) JobPosting(ctx context.Context, in *QueryGetJobPostingRequest, opts ...grpc.CallOption) (*QueryGetJobPostingResponse, error) {
	out := new(QueryGetJobPostingResponse)
	err := c.cc.Invoke(ctx, Query_JobPosting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) JobPostingAll(ctx context.Context, in *QueryAllJobPostingRequest, opts ...grpc.CallOption) (*QueryAllJobPostingResponse, error) {
	out := new(QueryAllJobPostingResponse)
	err := c.cc.Invoke(ctx, Query_JobPostingAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Proposal(ctx context.Context, in *QueryGetProposalRequest, opts ...grpc.CallOption) (*QueryGetProposalResponse, error) {
	out := new(QueryGetProposalResponse)
	err := c.cc.Invoke(ctx, Query_Proposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposalAll(ctx context.Context, in *QueryAllProposalRequest, opts ...grpc.CallOption) (*QueryAllProposalResponse, error) {
	out := new(QueryAllProposalResponse)
	err := c.cc.Invoke(ctx, Query_ProposalAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Project(ctx context.Context, in *QueryGetProjectRequest, opts ...grpc.CallOption) (*QueryGetProjectResponse, error) {
	out := new(QueryGetProjectResponse)
	err := c.cc.Invoke(ctx, Query_Project_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProjectAll(ctx context.Context, in *QueryAllProjectRequest, opts ...grpc.CallOption) (*QueryAllProjectResponse, error) {
	out := new(QueryAllProjectResponse)
	err := c.cc.Invoke(ctx, Query_ProjectAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Milestone(ctx context.Context, in *QueryGetMilestoneRequest, opts ...grpc.CallOption) (*QueryGetMilestoneResponse, error) {
	out := new(QueryGetMilestoneResponse)
	err := c.cc.Invoke(ctx, Query_Milestone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MilestoneAll(ctx context.Context, in *QueryAllMilestoneRequest, opts ...grpc.CallOption) (*QueryAllMilestoneResponse, error) {
	out := new(QueryAllMilestoneResponse)
	err := c.cc.Invoke(ctx, Query_MilestoneAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListJobPostings(ctx context.Context, in *QueryListJobPostingsRequest, opts ...grpc.CallOption) (*QueryListJobPostingsResponse, error) {
	out := new(QueryListJobPostingsResponse)
	err := c.cc.Invoke(ctx, Query_ListJobPostings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListProposals(ctx context.Context, in *QueryListProposalsRequest, opts ...grpc.CallOption) (*QueryListProposalsResponse, error) {
	out := new(QueryListProposalsResponse)
	err := c.cc.Invoke(ctx, Query_ListProposals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListProjects(ctx context.Context, in *QueryListProjectsRequest, opts ...grpc.CallOption) (*QueryListProjectsResponse, error) {
	out := new(QueryListProjectsResponse)
	err := c.cc.Invoke(ctx, Query_ListProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of JobPosting items.
	JobPosting(context.Context, *QueryGetJobPostingRequest) (*QueryGetJobPostingResponse, error)
	JobPostingAll(context.Context, *QueryAllJobPostingRequest) (*QueryAllJobPostingResponse, error)
	// Queries a list of Proposal items.
	Proposal(context.Context, *QueryGetProposalRequest) (*QueryGetProposalResponse, error)
	ProposalAll(context.Context, *QueryAllProposalRequest) (*QueryAllProposalResponse, error)
	// Queries a list of Project items.
	Project(context.Context, *QueryGetProjectRequest) (*QueryGetProjectResponse, error)
	ProjectAll(context.Context, *QueryAllProjectRequest) (*QueryAllProjectResponse, error)
	// Queries a list of Milestone items.
	Milestone(context.Context, *QueryGetMilestoneRequest) (*QueryGetMilestoneResponse, error)
	MilestoneAll(context.Context, *QueryAllMilestoneRequest) (*QueryAllMilestoneResponse, error)
	// Queries a list of ListJobPostings items.
	ListJobPostings(context.Context, *QueryListJobPostingsRequest) (*QueryListJobPostingsResponse, error)
	// Queries a list of ListProposals items.
	ListProposals(context.Context, *QueryListProposalsRequest) (*QueryListProposalsResponse, error)
	// Queries a list of ListProjects items.
	ListProjects(context.Context, *QueryListProjectsRequest) (*QueryListProjectsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) JobPosting(context.Context, *QueryGetJobPostingRequest) (*QueryGetJobPostingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobPosting not implemented")
}
func (UnimplementedQueryServer) JobPostingAll(context.Context, *QueryAllJobPostingRequest) (*QueryAllJobPostingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobPostingAll not implemented")
}
func (UnimplementedQueryServer) Proposal(context.Context, *QueryGetProposalRequest) (*QueryGetProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proposal not implemented")
}
func (UnimplementedQueryServer) ProposalAll(context.Context, *QueryAllProposalRequest) (*QueryAllProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalAll not implemented")
}
func (UnimplementedQueryServer) Project(context.Context, *QueryGetProjectRequest) (*QueryGetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Project not implemented")
}
func (UnimplementedQueryServer) ProjectAll(context.Context, *QueryAllProjectRequest) (*QueryAllProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectAll not implemented")
}
func (UnimplementedQueryServer) Milestone(context.Context, *QueryGetMilestoneRequest) (*QueryGetMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Milestone not implemented")
}
func (UnimplementedQueryServer) MilestoneAll(context.Context, *QueryAllMilestoneRequest) (*QueryAllMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MilestoneAll not implemented")
}
func (UnimplementedQueryServer) ListJobPostings(context.Context, *QueryListJobPostingsRequest) (*QueryListJobPostingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobPostings not implemented")
}
func (UnimplementedQueryServer) ListProposals(context.Context, *QueryListProposalsRequest) (*QueryListProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProposals not implemented")
}
func (UnimplementedQueryServer) ListProjects(context.Context, *QueryListProjectsRequest) (*QueryListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_JobPosting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetJobPostingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).JobPosting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_JobPosting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).JobPosting(ctx, req.(*QueryGetJobPostingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_JobPostingAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllJobPostingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).JobPostingAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_JobPostingAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).JobPostingAll(ctx, req.(*QueryAllJobPostingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Proposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Proposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Proposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Proposal(ctx, req.(*QueryGetProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposalAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposalAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ProposalAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposalAll(ctx, req.(*QueryAllProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Project_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Project(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Project_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Project(ctx, req.(*QueryGetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProjectAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProjectAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ProjectAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProjectAll(ctx, req.(*QueryAllProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Milestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Milestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Milestone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Milestone(ctx, req.(*QueryGetMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MilestoneAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MilestoneAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MilestoneAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MilestoneAll(ctx, req.(*QueryAllMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListJobPostings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListJobPostingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListJobPostings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListJobPostings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListJobPostings(ctx, req.(*QueryListJobPostingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListProposals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListProposals(ctx, req.(*QueryListProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListProjects(ctx, req.(*QueryListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skillchain.marketplace.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "JobPosting",
			Handler:    _Query_JobPosting_Handler,
		},
		{
			MethodName: "JobPostingAll",
			Handler:    _Query_JobPostingAll_Handler,
		},
		{
			MethodName: "Proposal",
			Handler:    _Query_Proposal_Handler,
		},
		{
			MethodName: "ProposalAll",
			Handler:    _Query_ProposalAll_Handler,
		},
		{
			MethodName: "Project",
			Handler:    _Query_Project_Handler,
		},
		{
			MethodName: "ProjectAll",
			Handler:    _Query_ProjectAll_Handler,
		},
		{
			MethodName: "Milestone",
			Handler:    _Query_Milestone_Handler,
		},
		{
			MethodName: "MilestoneAll",
			Handler:    _Query_MilestoneAll_Handler,
		},
		{
			MethodName: "ListJobPostings",
			Handler:    _Query_ListJobPostings_Handler,
		},
		{
			MethodName: "ListProposals",
			Handler:    _Query_ListProposals_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _Query_ListProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skillchain/marketplace/query.proto",
}
