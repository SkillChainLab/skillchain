// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: skillchain/notifications/tx.proto

package notifications

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName               = "/skillchain.notifications.Msg/UpdateParams"
	Msg_CreateNotification_FullMethodName         = "/skillchain.notifications.Msg/CreateNotification"
	Msg_UpdateNotification_FullMethodName         = "/skillchain.notifications.Msg/UpdateNotification"
	Msg_DeleteNotification_FullMethodName         = "/skillchain.notifications.Msg/DeleteNotification"
	Msg_CreateNotificationSettings_FullMethodName = "/skillchain.notifications.Msg/CreateNotificationSettings"
	Msg_UpdateNotificationSettings_FullMethodName = "/skillchain.notifications.Msg/UpdateNotificationSettings"
	Msg_DeleteNotificationSettings_FullMethodName = "/skillchain.notifications.Msg/DeleteNotificationSettings"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateNotification(ctx context.Context, in *MsgCreateNotification, opts ...grpc.CallOption) (*MsgCreateNotificationResponse, error)
	UpdateNotification(ctx context.Context, in *MsgUpdateNotification, opts ...grpc.CallOption) (*MsgUpdateNotificationResponse, error)
	DeleteNotification(ctx context.Context, in *MsgDeleteNotification, opts ...grpc.CallOption) (*MsgDeleteNotificationResponse, error)
	CreateNotificationSettings(ctx context.Context, in *MsgCreateNotificationSettings, opts ...grpc.CallOption) (*MsgCreateNotificationSettingsResponse, error)
	UpdateNotificationSettings(ctx context.Context, in *MsgUpdateNotificationSettings, opts ...grpc.CallOption) (*MsgUpdateNotificationSettingsResponse, error)
	DeleteNotificationSettings(ctx context.Context, in *MsgDeleteNotificationSettings, opts ...grpc.CallOption) (*MsgDeleteNotificationSettingsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateNotification(ctx context.Context, in *MsgCreateNotification, opts ...grpc.CallOption) (*MsgCreateNotificationResponse, error) {
	out := new(MsgCreateNotificationResponse)
	err := c.cc.Invoke(ctx, Msg_CreateNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateNotification(ctx context.Context, in *MsgUpdateNotification, opts ...grpc.CallOption) (*MsgUpdateNotificationResponse, error) {
	out := new(MsgUpdateNotificationResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteNotification(ctx context.Context, in *MsgDeleteNotification, opts ...grpc.CallOption) (*MsgDeleteNotificationResponse, error) {
	out := new(MsgDeleteNotificationResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateNotificationSettings(ctx context.Context, in *MsgCreateNotificationSettings, opts ...grpc.CallOption) (*MsgCreateNotificationSettingsResponse, error) {
	out := new(MsgCreateNotificationSettingsResponse)
	err := c.cc.Invoke(ctx, Msg_CreateNotificationSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateNotificationSettings(ctx context.Context, in *MsgUpdateNotificationSettings, opts ...grpc.CallOption) (*MsgUpdateNotificationSettingsResponse, error) {
	out := new(MsgUpdateNotificationSettingsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateNotificationSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteNotificationSettings(ctx context.Context, in *MsgDeleteNotificationSettings, opts ...grpc.CallOption) (*MsgDeleteNotificationSettingsResponse, error) {
	out := new(MsgDeleteNotificationSettingsResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteNotificationSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateNotification(context.Context, *MsgCreateNotification) (*MsgCreateNotificationResponse, error)
	UpdateNotification(context.Context, *MsgUpdateNotification) (*MsgUpdateNotificationResponse, error)
	DeleteNotification(context.Context, *MsgDeleteNotification) (*MsgDeleteNotificationResponse, error)
	CreateNotificationSettings(context.Context, *MsgCreateNotificationSettings) (*MsgCreateNotificationSettingsResponse, error)
	UpdateNotificationSettings(context.Context, *MsgUpdateNotificationSettings) (*MsgUpdateNotificationSettingsResponse, error)
	DeleteNotificationSettings(context.Context, *MsgDeleteNotificationSettings) (*MsgDeleteNotificationSettingsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateNotification(context.Context, *MsgCreateNotification) (*MsgCreateNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedMsgServer) UpdateNotification(context.Context, *MsgUpdateNotification) (*MsgUpdateNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotification not implemented")
}
func (UnimplementedMsgServer) DeleteNotification(context.Context, *MsgDeleteNotification) (*MsgDeleteNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotification not implemented")
}
func (UnimplementedMsgServer) CreateNotificationSettings(context.Context, *MsgCreateNotificationSettings) (*MsgCreateNotificationSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationSettings not implemented")
}
func (UnimplementedMsgServer) UpdateNotificationSettings(context.Context, *MsgUpdateNotificationSettings) (*MsgUpdateNotificationSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationSettings not implemented")
}
func (UnimplementedMsgServer) DeleteNotificationSettings(context.Context, *MsgDeleteNotificationSettings) (*MsgDeleteNotificationSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotificationSettings not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateNotification(ctx, req.(*MsgCreateNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateNotification(ctx, req.(*MsgUpdateNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteNotification(ctx, req.(*MsgDeleteNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateNotificationSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateNotificationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateNotificationSettings(ctx, req.(*MsgCreateNotificationSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateNotificationSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateNotificationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateNotificationSettings(ctx, req.(*MsgUpdateNotificationSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteNotificationSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteNotificationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteNotificationSettings(ctx, req.(*MsgDeleteNotificationSettings))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skillchain.notifications.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateNotification",
			Handler:    _Msg_CreateNotification_Handler,
		},
		{
			MethodName: "UpdateNotification",
			Handler:    _Msg_UpdateNotification_Handler,
		},
		{
			MethodName: "DeleteNotification",
			Handler:    _Msg_DeleteNotification_Handler,
		},
		{
			MethodName: "CreateNotificationSettings",
			Handler:    _Msg_CreateNotificationSettings_Handler,
		},
		{
			MethodName: "UpdateNotificationSettings",
			Handler:    _Msg_UpdateNotificationSettings_Handler,
		},
		{
			MethodName: "DeleteNotificationSettings",
			Handler:    _Msg_DeleteNotificationSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skillchain/notifications/tx.proto",
}
