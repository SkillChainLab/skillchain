// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: skillchain/filestorage/tx.proto

package filestorage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName         = "/skillchain.filestorage.Msg/UpdateParams"
	Msg_CreateFileRecord_FullMethodName     = "/skillchain.filestorage.Msg/CreateFileRecord"
	Msg_UpdateFileRecord_FullMethodName     = "/skillchain.filestorage.Msg/UpdateFileRecord"
	Msg_DeleteFileRecord_FullMethodName     = "/skillchain.filestorage.Msg/DeleteFileRecord"
	Msg_CreateFilePermission_FullMethodName = "/skillchain.filestorage.Msg/CreateFilePermission"
	Msg_UpdateFilePermission_FullMethodName = "/skillchain.filestorage.Msg/UpdateFilePermission"
	Msg_DeleteFilePermission_FullMethodName = "/skillchain.filestorage.Msg/DeleteFilePermission"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateFileRecord(ctx context.Context, in *MsgCreateFileRecord, opts ...grpc.CallOption) (*MsgCreateFileRecordResponse, error)
	UpdateFileRecord(ctx context.Context, in *MsgUpdateFileRecord, opts ...grpc.CallOption) (*MsgUpdateFileRecordResponse, error)
	DeleteFileRecord(ctx context.Context, in *MsgDeleteFileRecord, opts ...grpc.CallOption) (*MsgDeleteFileRecordResponse, error)
	CreateFilePermission(ctx context.Context, in *MsgCreateFilePermission, opts ...grpc.CallOption) (*MsgCreateFilePermissionResponse, error)
	UpdateFilePermission(ctx context.Context, in *MsgUpdateFilePermission, opts ...grpc.CallOption) (*MsgUpdateFilePermissionResponse, error)
	DeleteFilePermission(ctx context.Context, in *MsgDeleteFilePermission, opts ...grpc.CallOption) (*MsgDeleteFilePermissionResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateFileRecord(ctx context.Context, in *MsgCreateFileRecord, opts ...grpc.CallOption) (*MsgCreateFileRecordResponse, error) {
	out := new(MsgCreateFileRecordResponse)
	err := c.cc.Invoke(ctx, Msg_CreateFileRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateFileRecord(ctx context.Context, in *MsgUpdateFileRecord, opts ...grpc.CallOption) (*MsgUpdateFileRecordResponse, error) {
	out := new(MsgUpdateFileRecordResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateFileRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteFileRecord(ctx context.Context, in *MsgDeleteFileRecord, opts ...grpc.CallOption) (*MsgDeleteFileRecordResponse, error) {
	out := new(MsgDeleteFileRecordResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteFileRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateFilePermission(ctx context.Context, in *MsgCreateFilePermission, opts ...grpc.CallOption) (*MsgCreateFilePermissionResponse, error) {
	out := new(MsgCreateFilePermissionResponse)
	err := c.cc.Invoke(ctx, Msg_CreateFilePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateFilePermission(ctx context.Context, in *MsgUpdateFilePermission, opts ...grpc.CallOption) (*MsgUpdateFilePermissionResponse, error) {
	out := new(MsgUpdateFilePermissionResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateFilePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteFilePermission(ctx context.Context, in *MsgDeleteFilePermission, opts ...grpc.CallOption) (*MsgDeleteFilePermissionResponse, error) {
	out := new(MsgDeleteFilePermissionResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteFilePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateFileRecord(context.Context, *MsgCreateFileRecord) (*MsgCreateFileRecordResponse, error)
	UpdateFileRecord(context.Context, *MsgUpdateFileRecord) (*MsgUpdateFileRecordResponse, error)
	DeleteFileRecord(context.Context, *MsgDeleteFileRecord) (*MsgDeleteFileRecordResponse, error)
	CreateFilePermission(context.Context, *MsgCreateFilePermission) (*MsgCreateFilePermissionResponse, error)
	UpdateFilePermission(context.Context, *MsgUpdateFilePermission) (*MsgUpdateFilePermissionResponse, error)
	DeleteFilePermission(context.Context, *MsgDeleteFilePermission) (*MsgDeleteFilePermissionResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateFileRecord(context.Context, *MsgCreateFileRecord) (*MsgCreateFileRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFileRecord not implemented")
}
func (UnimplementedMsgServer) UpdateFileRecord(context.Context, *MsgUpdateFileRecord) (*MsgUpdateFileRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileRecord not implemented")
}
func (UnimplementedMsgServer) DeleteFileRecord(context.Context, *MsgDeleteFileRecord) (*MsgDeleteFileRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileRecord not implemented")
}
func (UnimplementedMsgServer) CreateFilePermission(context.Context, *MsgCreateFilePermission) (*MsgCreateFilePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilePermission not implemented")
}
func (UnimplementedMsgServer) UpdateFilePermission(context.Context, *MsgUpdateFilePermission) (*MsgUpdateFilePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilePermission not implemented")
}
func (UnimplementedMsgServer) DeleteFilePermission(context.Context, *MsgDeleteFilePermission) (*MsgDeleteFilePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilePermission not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateFileRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateFileRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateFileRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateFileRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateFileRecord(ctx, req.(*MsgCreateFileRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateFileRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateFileRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateFileRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateFileRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateFileRecord(ctx, req.(*MsgUpdateFileRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteFileRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteFileRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteFileRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteFileRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteFileRecord(ctx, req.(*MsgDeleteFileRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateFilePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateFilePermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateFilePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateFilePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateFilePermission(ctx, req.(*MsgCreateFilePermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateFilePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateFilePermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateFilePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateFilePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateFilePermission(ctx, req.(*MsgUpdateFilePermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteFilePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteFilePermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteFilePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteFilePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteFilePermission(ctx, req.(*MsgDeleteFilePermission))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skillchain.filestorage.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateFileRecord",
			Handler:    _Msg_CreateFileRecord_Handler,
		},
		{
			MethodName: "UpdateFileRecord",
			Handler:    _Msg_UpdateFileRecord_Handler,
		},
		{
			MethodName: "DeleteFileRecord",
			Handler:    _Msg_DeleteFileRecord_Handler,
		},
		{
			MethodName: "CreateFilePermission",
			Handler:    _Msg_CreateFilePermission_Handler,
		},
		{
			MethodName: "UpdateFilePermission",
			Handler:    _Msg_UpdateFilePermission_Handler,
		},
		{
			MethodName: "DeleteFilePermission",
			Handler:    _Msg_DeleteFilePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skillchain/filestorage/tx.proto",
}
