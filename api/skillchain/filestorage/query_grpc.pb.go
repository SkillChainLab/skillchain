// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: skillchain/filestorage/query.proto

package filestorage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName            = "/skillchain.filestorage.Query/Params"
	Query_FileRecord_FullMethodName        = "/skillchain.filestorage.Query/FileRecord"
	Query_FileRecordAll_FullMethodName     = "/skillchain.filestorage.Query/FileRecordAll"
	Query_FilePermission_FullMethodName    = "/skillchain.filestorage.Query/FilePermission"
	Query_FilePermissionAll_FullMethodName = "/skillchain.filestorage.Query/FilePermissionAll"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of FileRecord items.
	FileRecord(ctx context.Context, in *QueryGetFileRecordRequest, opts ...grpc.CallOption) (*QueryGetFileRecordResponse, error)
	FileRecordAll(ctx context.Context, in *QueryAllFileRecordRequest, opts ...grpc.CallOption) (*QueryAllFileRecordResponse, error)
	// Queries a list of FilePermission items.
	FilePermission(ctx context.Context, in *QueryGetFilePermissionRequest, opts ...grpc.CallOption) (*QueryGetFilePermissionResponse, error)
	FilePermissionAll(ctx context.Context, in *QueryAllFilePermissionRequest, opts ...grpc.CallOption) (*QueryAllFilePermissionResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FileRecord(ctx context.Context, in *QueryGetFileRecordRequest, opts ...grpc.CallOption) (*QueryGetFileRecordResponse, error) {
	out := new(QueryGetFileRecordResponse)
	err := c.cc.Invoke(ctx, Query_FileRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FileRecordAll(ctx context.Context, in *QueryAllFileRecordRequest, opts ...grpc.CallOption) (*QueryAllFileRecordResponse, error) {
	out := new(QueryAllFileRecordResponse)
	err := c.cc.Invoke(ctx, Query_FileRecordAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FilePermission(ctx context.Context, in *QueryGetFilePermissionRequest, opts ...grpc.CallOption) (*QueryGetFilePermissionResponse, error) {
	out := new(QueryGetFilePermissionResponse)
	err := c.cc.Invoke(ctx, Query_FilePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FilePermissionAll(ctx context.Context, in *QueryAllFilePermissionRequest, opts ...grpc.CallOption) (*QueryAllFilePermissionResponse, error) {
	out := new(QueryAllFilePermissionResponse)
	err := c.cc.Invoke(ctx, Query_FilePermissionAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of FileRecord items.
	FileRecord(context.Context, *QueryGetFileRecordRequest) (*QueryGetFileRecordResponse, error)
	FileRecordAll(context.Context, *QueryAllFileRecordRequest) (*QueryAllFileRecordResponse, error)
	// Queries a list of FilePermission items.
	FilePermission(context.Context, *QueryGetFilePermissionRequest) (*QueryGetFilePermissionResponse, error)
	FilePermissionAll(context.Context, *QueryAllFilePermissionRequest) (*QueryAllFilePermissionResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) FileRecord(context.Context, *QueryGetFileRecordRequest) (*QueryGetFileRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileRecord not implemented")
}
func (UnimplementedQueryServer) FileRecordAll(context.Context, *QueryAllFileRecordRequest) (*QueryAllFileRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileRecordAll not implemented")
}
func (UnimplementedQueryServer) FilePermission(context.Context, *QueryGetFilePermissionRequest) (*QueryGetFilePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilePermission not implemented")
}
func (UnimplementedQueryServer) FilePermissionAll(context.Context, *QueryAllFilePermissionRequest) (*QueryAllFilePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilePermissionAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FileRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFileRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FileRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FileRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FileRecord(ctx, req.(*QueryGetFileRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FileRecordAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFileRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FileRecordAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FileRecordAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FileRecordAll(ctx, req.(*QueryAllFileRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FilePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFilePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FilePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FilePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FilePermission(ctx, req.(*QueryGetFilePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FilePermissionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFilePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FilePermissionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FilePermissionAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FilePermissionAll(ctx, req.(*QueryAllFilePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skillchain.filestorage.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "FileRecord",
			Handler:    _Query_FileRecord_Handler,
		},
		{
			MethodName: "FileRecordAll",
			Handler:    _Query_FileRecordAll_Handler,
		},
		{
			MethodName: "FilePermission",
			Handler:    _Query_FilePermission_Handler,
		},
		{
			MethodName: "FilePermissionAll",
			Handler:    _Query_FilePermissionAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skillchain/filestorage/query.proto",
}
