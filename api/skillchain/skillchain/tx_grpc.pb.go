// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: skillchain/skillchain/tx.proto

package skillchain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName       = "/skillchain.skillchain.Msg/UpdateParams"
	Msg_Burn_FullMethodName               = "/skillchain.skillchain.Msg/Burn"
	Msg_CreateProfile_FullMethodName      = "/skillchain.skillchain.Msg/CreateProfile"
	Msg_ConvertSkillToVUSD_FullMethodName = "/skillchain.skillchain.Msg/ConvertSkillToVUSD"
	Msg_ConvertVUSDToSkill_FullMethodName = "/skillchain.skillchain.Msg/ConvertVUSDToSkill"
	Msg_UpdateVUSDPrice_FullMethodName    = "/skillchain.skillchain.Msg/UpdateVUSDPrice"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	Burn(ctx context.Context, in *MsgBurn, opts ...grpc.CallOption) (*MsgBurnResponse, error)
	CreateProfile(ctx context.Context, in *MsgCreateProfile, opts ...grpc.CallOption) (*MsgCreateProfileResponse, error)
	ConvertSkillToVUSD(ctx context.Context, in *MsgConvertSkillToVUSD, opts ...grpc.CallOption) (*MsgConvertSkillToVUSDResponse, error)
	ConvertVUSDToSkill(ctx context.Context, in *MsgConvertVUSDToSkill, opts ...grpc.CallOption) (*MsgConvertVUSDToSkillResponse, error)
	UpdateVUSDPrice(ctx context.Context, in *MsgUpdateVUSDPrice, opts ...grpc.CallOption) (*MsgUpdateVUSDPriceResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Burn(ctx context.Context, in *MsgBurn, opts ...grpc.CallOption) (*MsgBurnResponse, error) {
	out := new(MsgBurnResponse)
	err := c.cc.Invoke(ctx, Msg_Burn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateProfile(ctx context.Context, in *MsgCreateProfile, opts ...grpc.CallOption) (*MsgCreateProfileResponse, error) {
	out := new(MsgCreateProfileResponse)
	err := c.cc.Invoke(ctx, Msg_CreateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConvertSkillToVUSD(ctx context.Context, in *MsgConvertSkillToVUSD, opts ...grpc.CallOption) (*MsgConvertSkillToVUSDResponse, error) {
	out := new(MsgConvertSkillToVUSDResponse)
	err := c.cc.Invoke(ctx, Msg_ConvertSkillToVUSD_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConvertVUSDToSkill(ctx context.Context, in *MsgConvertVUSDToSkill, opts ...grpc.CallOption) (*MsgConvertVUSDToSkillResponse, error) {
	out := new(MsgConvertVUSDToSkillResponse)
	err := c.cc.Invoke(ctx, Msg_ConvertVUSDToSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVUSDPrice(ctx context.Context, in *MsgUpdateVUSDPrice, opts ...grpc.CallOption) (*MsgUpdateVUSDPriceResponse, error) {
	out := new(MsgUpdateVUSDPriceResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateVUSDPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	Burn(context.Context, *MsgBurn) (*MsgBurnResponse, error)
	CreateProfile(context.Context, *MsgCreateProfile) (*MsgCreateProfileResponse, error)
	ConvertSkillToVUSD(context.Context, *MsgConvertSkillToVUSD) (*MsgConvertSkillToVUSDResponse, error)
	ConvertVUSDToSkill(context.Context, *MsgConvertVUSDToSkill) (*MsgConvertVUSDToSkillResponse, error)
	UpdateVUSDPrice(context.Context, *MsgUpdateVUSDPrice) (*MsgUpdateVUSDPriceResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) Burn(context.Context, *MsgBurn) (*MsgBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Burn not implemented")
}
func (UnimplementedMsgServer) CreateProfile(context.Context, *MsgCreateProfile) (*MsgCreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedMsgServer) ConvertSkillToVUSD(context.Context, *MsgConvertSkillToVUSD) (*MsgConvertSkillToVUSDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertSkillToVUSD not implemented")
}
func (UnimplementedMsgServer) ConvertVUSDToSkill(context.Context, *MsgConvertVUSDToSkill) (*MsgConvertVUSDToSkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertVUSDToSkill not implemented")
}
func (UnimplementedMsgServer) UpdateVUSDPrice(context.Context, *MsgUpdateVUSDPrice) (*MsgUpdateVUSDPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVUSDPrice not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Burn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Burn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Burn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Burn(ctx, req.(*MsgBurn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateProfile(ctx, req.(*MsgCreateProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConvertSkillToVUSD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConvertSkillToVUSD)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConvertSkillToVUSD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ConvertSkillToVUSD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConvertSkillToVUSD(ctx, req.(*MsgConvertSkillToVUSD))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConvertVUSDToSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConvertVUSDToSkill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConvertVUSDToSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ConvertVUSDToSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConvertVUSDToSkill(ctx, req.(*MsgConvertVUSDToSkill))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVUSDPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVUSDPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVUSDPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateVUSDPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVUSDPrice(ctx, req.(*MsgUpdateVUSDPrice))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skillchain.skillchain.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "Burn",
			Handler:    _Msg_Burn_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _Msg_CreateProfile_Handler,
		},
		{
			MethodName: "ConvertSkillToVUSD",
			Handler:    _Msg_ConvertSkillToVUSD_Handler,
		},
		{
			MethodName: "ConvertVUSDToSkill",
			Handler:    _Msg_ConvertVUSDToSkill_Handler,
		},
		{
			MethodName: "UpdateVUSDPrice",
			Handler:    _Msg_UpdateVUSDPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skillchain/skillchain/tx.proto",
}
