// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: skillchain/profile/tx.proto

package profile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName           = "/skillchain.profile.Msg/UpdateParams"
	Msg_CreateProfile_FullMethodName          = "/skillchain.profile.Msg/CreateProfile"
	Msg_CreateUserProfile_FullMethodName      = "/skillchain.profile.Msg/CreateUserProfile"
	Msg_UpdateUserProfile_FullMethodName      = "/skillchain.profile.Msg/UpdateUserProfile"
	Msg_DeleteUserProfile_FullMethodName      = "/skillchain.profile.Msg/DeleteUserProfile"
	Msg_CreateUserSkill_FullMethodName        = "/skillchain.profile.Msg/CreateUserSkill"
	Msg_UpdateUserSkill_FullMethodName        = "/skillchain.profile.Msg/UpdateUserSkill"
	Msg_DeleteUserSkill_FullMethodName        = "/skillchain.profile.Msg/DeleteUserSkill"
	Msg_EndorseSkill_FullMethodName           = "/skillchain.profile.Msg/EndorseSkill"
	Msg_CreateSkillEndorsement_FullMethodName = "/skillchain.profile.Msg/CreateSkillEndorsement"
	Msg_UpdateSkillEndorsement_FullMethodName = "/skillchain.profile.Msg/UpdateSkillEndorsement"
	Msg_DeleteSkillEndorsement_FullMethodName = "/skillchain.profile.Msg/DeleteSkillEndorsement"
	Msg_DisputeEndorsement_FullMethodName     = "/skillchain.profile.Msg/DisputeEndorsement"
	Msg_WithdrawStakedTokens_FullMethodName   = "/skillchain.profile.Msg/WithdrawStakedTokens"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateProfile(ctx context.Context, in *MsgCreateProfile, opts ...grpc.CallOption) (*MsgCreateProfileResponse, error)
	CreateUserProfile(ctx context.Context, in *MsgCreateUserProfile, opts ...grpc.CallOption) (*MsgCreateUserProfileResponse, error)
	UpdateUserProfile(ctx context.Context, in *MsgUpdateUserProfile, opts ...grpc.CallOption) (*MsgUpdateUserProfileResponse, error)
	DeleteUserProfile(ctx context.Context, in *MsgDeleteUserProfile, opts ...grpc.CallOption) (*MsgDeleteUserProfileResponse, error)
	CreateUserSkill(ctx context.Context, in *MsgCreateUserSkill, opts ...grpc.CallOption) (*MsgCreateUserSkillResponse, error)
	UpdateUserSkill(ctx context.Context, in *MsgUpdateUserSkill, opts ...grpc.CallOption) (*MsgUpdateUserSkillResponse, error)
	DeleteUserSkill(ctx context.Context, in *MsgDeleteUserSkill, opts ...grpc.CallOption) (*MsgDeleteUserSkillResponse, error)
	EndorseSkill(ctx context.Context, in *MsgEndorseSkill, opts ...grpc.CallOption) (*MsgEndorseSkillResponse, error)
	CreateSkillEndorsement(ctx context.Context, in *MsgCreateSkillEndorsement, opts ...grpc.CallOption) (*MsgCreateSkillEndorsementResponse, error)
	UpdateSkillEndorsement(ctx context.Context, in *MsgUpdateSkillEndorsement, opts ...grpc.CallOption) (*MsgUpdateSkillEndorsementResponse, error)
	DeleteSkillEndorsement(ctx context.Context, in *MsgDeleteSkillEndorsement, opts ...grpc.CallOption) (*MsgDeleteSkillEndorsementResponse, error)
	DisputeEndorsement(ctx context.Context, in *MsgDisputeEndorsement, opts ...grpc.CallOption) (*MsgDisputeEndorsementResponse, error)
	WithdrawStakedTokens(ctx context.Context, in *MsgWithdrawStakedTokens, opts ...grpc.CallOption) (*MsgWithdrawStakedTokensResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateProfile(ctx context.Context, in *MsgCreateProfile, opts ...grpc.CallOption) (*MsgCreateProfileResponse, error) {
	out := new(MsgCreateProfileResponse)
	err := c.cc.Invoke(ctx, Msg_CreateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateUserProfile(ctx context.Context, in *MsgCreateUserProfile, opts ...grpc.CallOption) (*MsgCreateUserProfileResponse, error) {
	out := new(MsgCreateUserProfileResponse)
	err := c.cc.Invoke(ctx, Msg_CreateUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateUserProfile(ctx context.Context, in *MsgUpdateUserProfile, opts ...grpc.CallOption) (*MsgUpdateUserProfileResponse, error) {
	out := new(MsgUpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteUserProfile(ctx context.Context, in *MsgDeleteUserProfile, opts ...grpc.CallOption) (*MsgDeleteUserProfileResponse, error) {
	out := new(MsgDeleteUserProfileResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateUserSkill(ctx context.Context, in *MsgCreateUserSkill, opts ...grpc.CallOption) (*MsgCreateUserSkillResponse, error) {
	out := new(MsgCreateUserSkillResponse)
	err := c.cc.Invoke(ctx, Msg_CreateUserSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateUserSkill(ctx context.Context, in *MsgUpdateUserSkill, opts ...grpc.CallOption) (*MsgUpdateUserSkillResponse, error) {
	out := new(MsgUpdateUserSkillResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateUserSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteUserSkill(ctx context.Context, in *MsgDeleteUserSkill, opts ...grpc.CallOption) (*MsgDeleteUserSkillResponse, error) {
	out := new(MsgDeleteUserSkillResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteUserSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EndorseSkill(ctx context.Context, in *MsgEndorseSkill, opts ...grpc.CallOption) (*MsgEndorseSkillResponse, error) {
	out := new(MsgEndorseSkillResponse)
	err := c.cc.Invoke(ctx, Msg_EndorseSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSkillEndorsement(ctx context.Context, in *MsgCreateSkillEndorsement, opts ...grpc.CallOption) (*MsgCreateSkillEndorsementResponse, error) {
	out := new(MsgCreateSkillEndorsementResponse)
	err := c.cc.Invoke(ctx, Msg_CreateSkillEndorsement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSkillEndorsement(ctx context.Context, in *MsgUpdateSkillEndorsement, opts ...grpc.CallOption) (*MsgUpdateSkillEndorsementResponse, error) {
	out := new(MsgUpdateSkillEndorsementResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateSkillEndorsement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteSkillEndorsement(ctx context.Context, in *MsgDeleteSkillEndorsement, opts ...grpc.CallOption) (*MsgDeleteSkillEndorsementResponse, error) {
	out := new(MsgDeleteSkillEndorsementResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteSkillEndorsement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DisputeEndorsement(ctx context.Context, in *MsgDisputeEndorsement, opts ...grpc.CallOption) (*MsgDisputeEndorsementResponse, error) {
	out := new(MsgDisputeEndorsementResponse)
	err := c.cc.Invoke(ctx, Msg_DisputeEndorsement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawStakedTokens(ctx context.Context, in *MsgWithdrawStakedTokens, opts ...grpc.CallOption) (*MsgWithdrawStakedTokensResponse, error) {
	out := new(MsgWithdrawStakedTokensResponse)
	err := c.cc.Invoke(ctx, Msg_WithdrawStakedTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateProfile(context.Context, *MsgCreateProfile) (*MsgCreateProfileResponse, error)
	CreateUserProfile(context.Context, *MsgCreateUserProfile) (*MsgCreateUserProfileResponse, error)
	UpdateUserProfile(context.Context, *MsgUpdateUserProfile) (*MsgUpdateUserProfileResponse, error)
	DeleteUserProfile(context.Context, *MsgDeleteUserProfile) (*MsgDeleteUserProfileResponse, error)
	CreateUserSkill(context.Context, *MsgCreateUserSkill) (*MsgCreateUserSkillResponse, error)
	UpdateUserSkill(context.Context, *MsgUpdateUserSkill) (*MsgUpdateUserSkillResponse, error)
	DeleteUserSkill(context.Context, *MsgDeleteUserSkill) (*MsgDeleteUserSkillResponse, error)
	EndorseSkill(context.Context, *MsgEndorseSkill) (*MsgEndorseSkillResponse, error)
	CreateSkillEndorsement(context.Context, *MsgCreateSkillEndorsement) (*MsgCreateSkillEndorsementResponse, error)
	UpdateSkillEndorsement(context.Context, *MsgUpdateSkillEndorsement) (*MsgUpdateSkillEndorsementResponse, error)
	DeleteSkillEndorsement(context.Context, *MsgDeleteSkillEndorsement) (*MsgDeleteSkillEndorsementResponse, error)
	DisputeEndorsement(context.Context, *MsgDisputeEndorsement) (*MsgDisputeEndorsementResponse, error)
	WithdrawStakedTokens(context.Context, *MsgWithdrawStakedTokens) (*MsgWithdrawStakedTokensResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateProfile(context.Context, *MsgCreateProfile) (*MsgCreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedMsgServer) CreateUserProfile(context.Context, *MsgCreateUserProfile) (*MsgCreateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserProfile not implemented")
}
func (UnimplementedMsgServer) UpdateUserProfile(context.Context, *MsgUpdateUserProfile) (*MsgUpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedMsgServer) DeleteUserProfile(context.Context, *MsgDeleteUserProfile) (*MsgDeleteUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserProfile not implemented")
}
func (UnimplementedMsgServer) CreateUserSkill(context.Context, *MsgCreateUserSkill) (*MsgCreateUserSkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserSkill not implemented")
}
func (UnimplementedMsgServer) UpdateUserSkill(context.Context, *MsgUpdateUserSkill) (*MsgUpdateUserSkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSkill not implemented")
}
func (UnimplementedMsgServer) DeleteUserSkill(context.Context, *MsgDeleteUserSkill) (*MsgDeleteUserSkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserSkill not implemented")
}
func (UnimplementedMsgServer) EndorseSkill(context.Context, *MsgEndorseSkill) (*MsgEndorseSkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndorseSkill not implemented")
}
func (UnimplementedMsgServer) CreateSkillEndorsement(context.Context, *MsgCreateSkillEndorsement) (*MsgCreateSkillEndorsementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSkillEndorsement not implemented")
}
func (UnimplementedMsgServer) UpdateSkillEndorsement(context.Context, *MsgUpdateSkillEndorsement) (*MsgUpdateSkillEndorsementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkillEndorsement not implemented")
}
func (UnimplementedMsgServer) DeleteSkillEndorsement(context.Context, *MsgDeleteSkillEndorsement) (*MsgDeleteSkillEndorsementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSkillEndorsement not implemented")
}
func (UnimplementedMsgServer) DisputeEndorsement(context.Context, *MsgDisputeEndorsement) (*MsgDisputeEndorsementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisputeEndorsement not implemented")
}
func (UnimplementedMsgServer) WithdrawStakedTokens(context.Context, *MsgWithdrawStakedTokens) (*MsgWithdrawStakedTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawStakedTokens not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateProfile(ctx, req.(*MsgCreateProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateUserProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateUserProfile(ctx, req.(*MsgCreateUserProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateUserProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateUserProfile(ctx, req.(*MsgUpdateUserProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteUserProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteUserProfile(ctx, req.(*MsgDeleteUserProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateUserSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateUserSkill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateUserSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateUserSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateUserSkill(ctx, req.(*MsgCreateUserSkill))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateUserSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateUserSkill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateUserSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateUserSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateUserSkill(ctx, req.(*MsgUpdateUserSkill))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteUserSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteUserSkill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteUserSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteUserSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteUserSkill(ctx, req.(*MsgDeleteUserSkill))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EndorseSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEndorseSkill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EndorseSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_EndorseSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EndorseSkill(ctx, req.(*MsgEndorseSkill))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSkillEndorsement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSkillEndorsement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSkillEndorsement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateSkillEndorsement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSkillEndorsement(ctx, req.(*MsgCreateSkillEndorsement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSkillEndorsement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSkillEndorsement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSkillEndorsement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateSkillEndorsement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSkillEndorsement(ctx, req.(*MsgUpdateSkillEndorsement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteSkillEndorsement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteSkillEndorsement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteSkillEndorsement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteSkillEndorsement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteSkillEndorsement(ctx, req.(*MsgDeleteSkillEndorsement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DisputeEndorsement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDisputeEndorsement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DisputeEndorsement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DisputeEndorsement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DisputeEndorsement(ctx, req.(*MsgDisputeEndorsement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawStakedTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawStakedTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawStakedTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_WithdrawStakedTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawStakedTokens(ctx, req.(*MsgWithdrawStakedTokens))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skillchain.profile.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _Msg_CreateProfile_Handler,
		},
		{
			MethodName: "CreateUserProfile",
			Handler:    _Msg_CreateUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _Msg_UpdateUserProfile_Handler,
		},
		{
			MethodName: "DeleteUserProfile",
			Handler:    _Msg_DeleteUserProfile_Handler,
		},
		{
			MethodName: "CreateUserSkill",
			Handler:    _Msg_CreateUserSkill_Handler,
		},
		{
			MethodName: "UpdateUserSkill",
			Handler:    _Msg_UpdateUserSkill_Handler,
		},
		{
			MethodName: "DeleteUserSkill",
			Handler:    _Msg_DeleteUserSkill_Handler,
		},
		{
			MethodName: "EndorseSkill",
			Handler:    _Msg_EndorseSkill_Handler,
		},
		{
			MethodName: "CreateSkillEndorsement",
			Handler:    _Msg_CreateSkillEndorsement_Handler,
		},
		{
			MethodName: "UpdateSkillEndorsement",
			Handler:    _Msg_UpdateSkillEndorsement_Handler,
		},
		{
			MethodName: "DeleteSkillEndorsement",
			Handler:    _Msg_DeleteSkillEndorsement_Handler,
		},
		{
			MethodName: "DisputeEndorsement",
			Handler:    _Msg_DisputeEndorsement_Handler,
		},
		{
			MethodName: "WithdrawStakedTokens",
			Handler:    _Msg_WithdrawStakedTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skillchain/profile/tx.proto",
}
