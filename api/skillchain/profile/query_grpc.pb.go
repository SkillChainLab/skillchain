// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: skillchain/profile/query.proto

package profile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName              = "/skillchain.profile.Query/Params"
	Query_UserProfile_FullMethodName         = "/skillchain.profile.Query/UserProfile"
	Query_UserProfileAll_FullMethodName      = "/skillchain.profile.Query/UserProfileAll"
	Query_UserSkill_FullMethodName           = "/skillchain.profile.Query/UserSkill"
	Query_UserSkillAll_FullMethodName        = "/skillchain.profile.Query/UserSkillAll"
	Query_SkillEndorsement_FullMethodName    = "/skillchain.profile.Query/SkillEndorsement"
	Query_SkillEndorsementAll_FullMethodName = "/skillchain.profile.Query/SkillEndorsementAll"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of UserProfile items.
	UserProfile(ctx context.Context, in *QueryGetUserProfileRequest, opts ...grpc.CallOption) (*QueryGetUserProfileResponse, error)
	UserProfileAll(ctx context.Context, in *QueryAllUserProfileRequest, opts ...grpc.CallOption) (*QueryAllUserProfileResponse, error)
	// Queries a list of UserSkill items.
	UserSkill(ctx context.Context, in *QueryGetUserSkillRequest, opts ...grpc.CallOption) (*QueryGetUserSkillResponse, error)
	UserSkillAll(ctx context.Context, in *QueryAllUserSkillRequest, opts ...grpc.CallOption) (*QueryAllUserSkillResponse, error)
	// Queries a list of SkillEndorsement items.
	SkillEndorsement(ctx context.Context, in *QueryGetSkillEndorsementRequest, opts ...grpc.CallOption) (*QueryGetSkillEndorsementResponse, error)
	SkillEndorsementAll(ctx context.Context, in *QueryAllSkillEndorsementRequest, opts ...grpc.CallOption) (*QueryAllSkillEndorsementResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserProfile(ctx context.Context, in *QueryGetUserProfileRequest, opts ...grpc.CallOption) (*QueryGetUserProfileResponse, error) {
	out := new(QueryGetUserProfileResponse)
	err := c.cc.Invoke(ctx, Query_UserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserProfileAll(ctx context.Context, in *QueryAllUserProfileRequest, opts ...grpc.CallOption) (*QueryAllUserProfileResponse, error) {
	out := new(QueryAllUserProfileResponse)
	err := c.cc.Invoke(ctx, Query_UserProfileAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserSkill(ctx context.Context, in *QueryGetUserSkillRequest, opts ...grpc.CallOption) (*QueryGetUserSkillResponse, error) {
	out := new(QueryGetUserSkillResponse)
	err := c.cc.Invoke(ctx, Query_UserSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserSkillAll(ctx context.Context, in *QueryAllUserSkillRequest, opts ...grpc.CallOption) (*QueryAllUserSkillResponse, error) {
	out := new(QueryAllUserSkillResponse)
	err := c.cc.Invoke(ctx, Query_UserSkillAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SkillEndorsement(ctx context.Context, in *QueryGetSkillEndorsementRequest, opts ...grpc.CallOption) (*QueryGetSkillEndorsementResponse, error) {
	out := new(QueryGetSkillEndorsementResponse)
	err := c.cc.Invoke(ctx, Query_SkillEndorsement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SkillEndorsementAll(ctx context.Context, in *QueryAllSkillEndorsementRequest, opts ...grpc.CallOption) (*QueryAllSkillEndorsementResponse, error) {
	out := new(QueryAllSkillEndorsementResponse)
	err := c.cc.Invoke(ctx, Query_SkillEndorsementAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of UserProfile items.
	UserProfile(context.Context, *QueryGetUserProfileRequest) (*QueryGetUserProfileResponse, error)
	UserProfileAll(context.Context, *QueryAllUserProfileRequest) (*QueryAllUserProfileResponse, error)
	// Queries a list of UserSkill items.
	UserSkill(context.Context, *QueryGetUserSkillRequest) (*QueryGetUserSkillResponse, error)
	UserSkillAll(context.Context, *QueryAllUserSkillRequest) (*QueryAllUserSkillResponse, error)
	// Queries a list of SkillEndorsement items.
	SkillEndorsement(context.Context, *QueryGetSkillEndorsementRequest) (*QueryGetSkillEndorsementResponse, error)
	SkillEndorsementAll(context.Context, *QueryAllSkillEndorsementRequest) (*QueryAllSkillEndorsementResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) UserProfile(context.Context, *QueryGetUserProfileRequest) (*QueryGetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProfile not implemented")
}
func (UnimplementedQueryServer) UserProfileAll(context.Context, *QueryAllUserProfileRequest) (*QueryAllUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProfileAll not implemented")
}
func (UnimplementedQueryServer) UserSkill(context.Context, *QueryGetUserSkillRequest) (*QueryGetUserSkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSkill not implemented")
}
func (UnimplementedQueryServer) UserSkillAll(context.Context, *QueryAllUserSkillRequest) (*QueryAllUserSkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSkillAll not implemented")
}
func (UnimplementedQueryServer) SkillEndorsement(context.Context, *QueryGetSkillEndorsementRequest) (*QueryGetSkillEndorsementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkillEndorsement not implemented")
}
func (UnimplementedQueryServer) SkillEndorsementAll(context.Context, *QueryAllSkillEndorsementRequest) (*QueryAllSkillEndorsementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkillEndorsementAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserProfile(ctx, req.(*QueryGetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserProfileAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserProfileAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UserProfileAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserProfileAll(ctx, req.(*QueryAllUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UserSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserSkill(ctx, req.(*QueryGetUserSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserSkillAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserSkillAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UserSkillAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserSkillAll(ctx, req.(*QueryAllUserSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SkillEndorsement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSkillEndorsementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SkillEndorsement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SkillEndorsement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SkillEndorsement(ctx, req.(*QueryGetSkillEndorsementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SkillEndorsementAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSkillEndorsementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SkillEndorsementAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SkillEndorsementAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SkillEndorsementAll(ctx, req.(*QueryAllSkillEndorsementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skillchain.profile.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "UserProfile",
			Handler:    _Query_UserProfile_Handler,
		},
		{
			MethodName: "UserProfileAll",
			Handler:    _Query_UserProfileAll_Handler,
		},
		{
			MethodName: "UserSkill",
			Handler:    _Query_UserSkill_Handler,
		},
		{
			MethodName: "UserSkillAll",
			Handler:    _Query_UserSkillAll_Handler,
		},
		{
			MethodName: "SkillEndorsement",
			Handler:    _Query_SkillEndorsement_Handler,
		},
		{
			MethodName: "SkillEndorsementAll",
			Handler:    _Query_SkillEndorsementAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skillchain/profile/query.proto",
}
