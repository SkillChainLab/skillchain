// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: skillchain/analytics/query.proto

package analytics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName            = "/skillchain.analytics.Query/Params"
	Query_PlatformMetric_FullMethodName    = "/skillchain.analytics.Query/PlatformMetric"
	Query_PlatformMetricAll_FullMethodName = "/skillchain.analytics.Query/PlatformMetricAll"
	Query_UserActivity_FullMethodName      = "/skillchain.analytics.Query/UserActivity"
	Query_UserActivityAll_FullMethodName   = "/skillchain.analytics.Query/UserActivityAll"
	Query_RevenueRecord_FullMethodName     = "/skillchain.analytics.Query/RevenueRecord"
	Query_RevenueRecordAll_FullMethodName  = "/skillchain.analytics.Query/RevenueRecordAll"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of PlatformMetric items.
	PlatformMetric(ctx context.Context, in *QueryGetPlatformMetricRequest, opts ...grpc.CallOption) (*QueryGetPlatformMetricResponse, error)
	PlatformMetricAll(ctx context.Context, in *QueryAllPlatformMetricRequest, opts ...grpc.CallOption) (*QueryAllPlatformMetricResponse, error)
	// Queries a list of UserActivity items.
	UserActivity(ctx context.Context, in *QueryGetUserActivityRequest, opts ...grpc.CallOption) (*QueryGetUserActivityResponse, error)
	UserActivityAll(ctx context.Context, in *QueryAllUserActivityRequest, opts ...grpc.CallOption) (*QueryAllUserActivityResponse, error)
	// Queries a list of RevenueRecord items.
	RevenueRecord(ctx context.Context, in *QueryGetRevenueRecordRequest, opts ...grpc.CallOption) (*QueryGetRevenueRecordResponse, error)
	RevenueRecordAll(ctx context.Context, in *QueryAllRevenueRecordRequest, opts ...grpc.CallOption) (*QueryAllRevenueRecordResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PlatformMetric(ctx context.Context, in *QueryGetPlatformMetricRequest, opts ...grpc.CallOption) (*QueryGetPlatformMetricResponse, error) {
	out := new(QueryGetPlatformMetricResponse)
	err := c.cc.Invoke(ctx, Query_PlatformMetric_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PlatformMetricAll(ctx context.Context, in *QueryAllPlatformMetricRequest, opts ...grpc.CallOption) (*QueryAllPlatformMetricResponse, error) {
	out := new(QueryAllPlatformMetricResponse)
	err := c.cc.Invoke(ctx, Query_PlatformMetricAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserActivity(ctx context.Context, in *QueryGetUserActivityRequest, opts ...grpc.CallOption) (*QueryGetUserActivityResponse, error) {
	out := new(QueryGetUserActivityResponse)
	err := c.cc.Invoke(ctx, Query_UserActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserActivityAll(ctx context.Context, in *QueryAllUserActivityRequest, opts ...grpc.CallOption) (*QueryAllUserActivityResponse, error) {
	out := new(QueryAllUserActivityResponse)
	err := c.cc.Invoke(ctx, Query_UserActivityAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevenueRecord(ctx context.Context, in *QueryGetRevenueRecordRequest, opts ...grpc.CallOption) (*QueryGetRevenueRecordResponse, error) {
	out := new(QueryGetRevenueRecordResponse)
	err := c.cc.Invoke(ctx, Query_RevenueRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevenueRecordAll(ctx context.Context, in *QueryAllRevenueRecordRequest, opts ...grpc.CallOption) (*QueryAllRevenueRecordResponse, error) {
	out := new(QueryAllRevenueRecordResponse)
	err := c.cc.Invoke(ctx, Query_RevenueRecordAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of PlatformMetric items.
	PlatformMetric(context.Context, *QueryGetPlatformMetricRequest) (*QueryGetPlatformMetricResponse, error)
	PlatformMetricAll(context.Context, *QueryAllPlatformMetricRequest) (*QueryAllPlatformMetricResponse, error)
	// Queries a list of UserActivity items.
	UserActivity(context.Context, *QueryGetUserActivityRequest) (*QueryGetUserActivityResponse, error)
	UserActivityAll(context.Context, *QueryAllUserActivityRequest) (*QueryAllUserActivityResponse, error)
	// Queries a list of RevenueRecord items.
	RevenueRecord(context.Context, *QueryGetRevenueRecordRequest) (*QueryGetRevenueRecordResponse, error)
	RevenueRecordAll(context.Context, *QueryAllRevenueRecordRequest) (*QueryAllRevenueRecordResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) PlatformMetric(context.Context, *QueryGetPlatformMetricRequest) (*QueryGetPlatformMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformMetric not implemented")
}
func (UnimplementedQueryServer) PlatformMetricAll(context.Context, *QueryAllPlatformMetricRequest) (*QueryAllPlatformMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformMetricAll not implemented")
}
func (UnimplementedQueryServer) UserActivity(context.Context, *QueryGetUserActivityRequest) (*QueryGetUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserActivity not implemented")
}
func (UnimplementedQueryServer) UserActivityAll(context.Context, *QueryAllUserActivityRequest) (*QueryAllUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserActivityAll not implemented")
}
func (UnimplementedQueryServer) RevenueRecord(context.Context, *QueryGetRevenueRecordRequest) (*QueryGetRevenueRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevenueRecord not implemented")
}
func (UnimplementedQueryServer) RevenueRecordAll(context.Context, *QueryAllRevenueRecordRequest) (*QueryAllRevenueRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevenueRecordAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PlatformMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPlatformMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PlatformMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PlatformMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PlatformMetric(ctx, req.(*QueryGetPlatformMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PlatformMetricAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPlatformMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PlatformMetricAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PlatformMetricAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PlatformMetricAll(ctx, req.(*QueryAllPlatformMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UserActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserActivity(ctx, req.(*QueryGetUserActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserActivityAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserActivityAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UserActivityAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserActivityAll(ctx, req.(*QueryAllUserActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevenueRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRevenueRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevenueRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RevenueRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevenueRecord(ctx, req.(*QueryGetRevenueRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevenueRecordAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRevenueRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevenueRecordAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RevenueRecordAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevenueRecordAll(ctx, req.(*QueryAllRevenueRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skillchain.analytics.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "PlatformMetric",
			Handler:    _Query_PlatformMetric_Handler,
		},
		{
			MethodName: "PlatformMetricAll",
			Handler:    _Query_PlatformMetricAll_Handler,
		},
		{
			MethodName: "UserActivity",
			Handler:    _Query_UserActivity_Handler,
		},
		{
			MethodName: "UserActivityAll",
			Handler:    _Query_UserActivityAll_Handler,
		},
		{
			MethodName: "RevenueRecord",
			Handler:    _Query_RevenueRecord_Handler,
		},
		{
			MethodName: "RevenueRecordAll",
			Handler:    _Query_RevenueRecordAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skillchain/analytics/query.proto",
}
