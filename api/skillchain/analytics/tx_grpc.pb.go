// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: skillchain/analytics/tx.proto

package analytics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName         = "/skillchain.analytics.Msg/UpdateParams"
	Msg_CreatePlatformMetric_FullMethodName = "/skillchain.analytics.Msg/CreatePlatformMetric"
	Msg_UpdatePlatformMetric_FullMethodName = "/skillchain.analytics.Msg/UpdatePlatformMetric"
	Msg_DeletePlatformMetric_FullMethodName = "/skillchain.analytics.Msg/DeletePlatformMetric"
	Msg_CreateUserActivity_FullMethodName   = "/skillchain.analytics.Msg/CreateUserActivity"
	Msg_UpdateUserActivity_FullMethodName   = "/skillchain.analytics.Msg/UpdateUserActivity"
	Msg_DeleteUserActivity_FullMethodName   = "/skillchain.analytics.Msg/DeleteUserActivity"
	Msg_CreateRevenueRecord_FullMethodName  = "/skillchain.analytics.Msg/CreateRevenueRecord"
	Msg_UpdateRevenueRecord_FullMethodName  = "/skillchain.analytics.Msg/UpdateRevenueRecord"
	Msg_DeleteRevenueRecord_FullMethodName  = "/skillchain.analytics.Msg/DeleteRevenueRecord"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreatePlatformMetric(ctx context.Context, in *MsgCreatePlatformMetric, opts ...grpc.CallOption) (*MsgCreatePlatformMetricResponse, error)
	UpdatePlatformMetric(ctx context.Context, in *MsgUpdatePlatformMetric, opts ...grpc.CallOption) (*MsgUpdatePlatformMetricResponse, error)
	DeletePlatformMetric(ctx context.Context, in *MsgDeletePlatformMetric, opts ...grpc.CallOption) (*MsgDeletePlatformMetricResponse, error)
	CreateUserActivity(ctx context.Context, in *MsgCreateUserActivity, opts ...grpc.CallOption) (*MsgCreateUserActivityResponse, error)
	UpdateUserActivity(ctx context.Context, in *MsgUpdateUserActivity, opts ...grpc.CallOption) (*MsgUpdateUserActivityResponse, error)
	DeleteUserActivity(ctx context.Context, in *MsgDeleteUserActivity, opts ...grpc.CallOption) (*MsgDeleteUserActivityResponse, error)
	CreateRevenueRecord(ctx context.Context, in *MsgCreateRevenueRecord, opts ...grpc.CallOption) (*MsgCreateRevenueRecordResponse, error)
	UpdateRevenueRecord(ctx context.Context, in *MsgUpdateRevenueRecord, opts ...grpc.CallOption) (*MsgUpdateRevenueRecordResponse, error)
	DeleteRevenueRecord(ctx context.Context, in *MsgDeleteRevenueRecord, opts ...grpc.CallOption) (*MsgDeleteRevenueRecordResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePlatformMetric(ctx context.Context, in *MsgCreatePlatformMetric, opts ...grpc.CallOption) (*MsgCreatePlatformMetricResponse, error) {
	out := new(MsgCreatePlatformMetricResponse)
	err := c.cc.Invoke(ctx, Msg_CreatePlatformMetric_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePlatformMetric(ctx context.Context, in *MsgUpdatePlatformMetric, opts ...grpc.CallOption) (*MsgUpdatePlatformMetricResponse, error) {
	out := new(MsgUpdatePlatformMetricResponse)
	err := c.cc.Invoke(ctx, Msg_UpdatePlatformMetric_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeletePlatformMetric(ctx context.Context, in *MsgDeletePlatformMetric, opts ...grpc.CallOption) (*MsgDeletePlatformMetricResponse, error) {
	out := new(MsgDeletePlatformMetricResponse)
	err := c.cc.Invoke(ctx, Msg_DeletePlatformMetric_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateUserActivity(ctx context.Context, in *MsgCreateUserActivity, opts ...grpc.CallOption) (*MsgCreateUserActivityResponse, error) {
	out := new(MsgCreateUserActivityResponse)
	err := c.cc.Invoke(ctx, Msg_CreateUserActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateUserActivity(ctx context.Context, in *MsgUpdateUserActivity, opts ...grpc.CallOption) (*MsgUpdateUserActivityResponse, error) {
	out := new(MsgUpdateUserActivityResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateUserActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteUserActivity(ctx context.Context, in *MsgDeleteUserActivity, opts ...grpc.CallOption) (*MsgDeleteUserActivityResponse, error) {
	out := new(MsgDeleteUserActivityResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteUserActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateRevenueRecord(ctx context.Context, in *MsgCreateRevenueRecord, opts ...grpc.CallOption) (*MsgCreateRevenueRecordResponse, error) {
	out := new(MsgCreateRevenueRecordResponse)
	err := c.cc.Invoke(ctx, Msg_CreateRevenueRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRevenueRecord(ctx context.Context, in *MsgUpdateRevenueRecord, opts ...grpc.CallOption) (*MsgUpdateRevenueRecordResponse, error) {
	out := new(MsgUpdateRevenueRecordResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateRevenueRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteRevenueRecord(ctx context.Context, in *MsgDeleteRevenueRecord, opts ...grpc.CallOption) (*MsgDeleteRevenueRecordResponse, error) {
	out := new(MsgDeleteRevenueRecordResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteRevenueRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreatePlatformMetric(context.Context, *MsgCreatePlatformMetric) (*MsgCreatePlatformMetricResponse, error)
	UpdatePlatformMetric(context.Context, *MsgUpdatePlatformMetric) (*MsgUpdatePlatformMetricResponse, error)
	DeletePlatformMetric(context.Context, *MsgDeletePlatformMetric) (*MsgDeletePlatformMetricResponse, error)
	CreateUserActivity(context.Context, *MsgCreateUserActivity) (*MsgCreateUserActivityResponse, error)
	UpdateUserActivity(context.Context, *MsgUpdateUserActivity) (*MsgUpdateUserActivityResponse, error)
	DeleteUserActivity(context.Context, *MsgDeleteUserActivity) (*MsgDeleteUserActivityResponse, error)
	CreateRevenueRecord(context.Context, *MsgCreateRevenueRecord) (*MsgCreateRevenueRecordResponse, error)
	UpdateRevenueRecord(context.Context, *MsgUpdateRevenueRecord) (*MsgUpdateRevenueRecordResponse, error)
	DeleteRevenueRecord(context.Context, *MsgDeleteRevenueRecord) (*MsgDeleteRevenueRecordResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreatePlatformMetric(context.Context, *MsgCreatePlatformMetric) (*MsgCreatePlatformMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlatformMetric not implemented")
}
func (UnimplementedMsgServer) UpdatePlatformMetric(context.Context, *MsgUpdatePlatformMetric) (*MsgUpdatePlatformMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlatformMetric not implemented")
}
func (UnimplementedMsgServer) DeletePlatformMetric(context.Context, *MsgDeletePlatformMetric) (*MsgDeletePlatformMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlatformMetric not implemented")
}
func (UnimplementedMsgServer) CreateUserActivity(context.Context, *MsgCreateUserActivity) (*MsgCreateUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserActivity not implemented")
}
func (UnimplementedMsgServer) UpdateUserActivity(context.Context, *MsgUpdateUserActivity) (*MsgUpdateUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserActivity not implemented")
}
func (UnimplementedMsgServer) DeleteUserActivity(context.Context, *MsgDeleteUserActivity) (*MsgDeleteUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserActivity not implemented")
}
func (UnimplementedMsgServer) CreateRevenueRecord(context.Context, *MsgCreateRevenueRecord) (*MsgCreateRevenueRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRevenueRecord not implemented")
}
func (UnimplementedMsgServer) UpdateRevenueRecord(context.Context, *MsgUpdateRevenueRecord) (*MsgUpdateRevenueRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRevenueRecord not implemented")
}
func (UnimplementedMsgServer) DeleteRevenueRecord(context.Context, *MsgDeleteRevenueRecord) (*MsgDeleteRevenueRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRevenueRecord not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePlatformMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePlatformMetric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePlatformMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreatePlatformMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePlatformMetric(ctx, req.(*MsgCreatePlatformMetric))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePlatformMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePlatformMetric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePlatformMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdatePlatformMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePlatformMetric(ctx, req.(*MsgUpdatePlatformMetric))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeletePlatformMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeletePlatformMetric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeletePlatformMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeletePlatformMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeletePlatformMetric(ctx, req.(*MsgDeletePlatformMetric))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateUserActivity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateUserActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateUserActivity(ctx, req.(*MsgCreateUserActivity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateUserActivity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateUserActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateUserActivity(ctx, req.(*MsgUpdateUserActivity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteUserActivity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteUserActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteUserActivity(ctx, req.(*MsgDeleteUserActivity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateRevenueRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRevenueRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateRevenueRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateRevenueRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateRevenueRecord(ctx, req.(*MsgCreateRevenueRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRevenueRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRevenueRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRevenueRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateRevenueRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRevenueRecord(ctx, req.(*MsgUpdateRevenueRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteRevenueRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteRevenueRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteRevenueRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteRevenueRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteRevenueRecord(ctx, req.(*MsgDeleteRevenueRecord))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skillchain.analytics.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreatePlatformMetric",
			Handler:    _Msg_CreatePlatformMetric_Handler,
		},
		{
			MethodName: "UpdatePlatformMetric",
			Handler:    _Msg_UpdatePlatformMetric_Handler,
		},
		{
			MethodName: "DeletePlatformMetric",
			Handler:    _Msg_DeletePlatformMetric_Handler,
		},
		{
			MethodName: "CreateUserActivity",
			Handler:    _Msg_CreateUserActivity_Handler,
		},
		{
			MethodName: "UpdateUserActivity",
			Handler:    _Msg_UpdateUserActivity_Handler,
		},
		{
			MethodName: "DeleteUserActivity",
			Handler:    _Msg_DeleteUserActivity_Handler,
		},
		{
			MethodName: "CreateRevenueRecord",
			Handler:    _Msg_CreateRevenueRecord_Handler,
		},
		{
			MethodName: "UpdateRevenueRecord",
			Handler:    _Msg_UpdateRevenueRecord_Handler,
		},
		{
			MethodName: "DeleteRevenueRecord",
			Handler:    _Msg_DeleteRevenueRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skillchain/analytics/tx.proto",
}
