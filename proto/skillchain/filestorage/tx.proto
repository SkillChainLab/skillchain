syntax = "proto3";

package skillchain.filestorage;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "skillchain/filestorage/params.proto";
import "skillchain/filestorage/file_record.proto";
import "skillchain/filestorage/file_permission.proto";

option go_package = "skillchain/x/filestorage/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams         (MsgUpdateParams        ) returns (MsgUpdateParamsResponse        );
  rpc CreateFileRecord     (MsgCreateFileRecord    ) returns (MsgCreateFileRecordResponse    );
  rpc UpdateFileRecord     (MsgUpdateFileRecord    ) returns (MsgUpdateFileRecordResponse    );
  rpc DeleteFileRecord     (MsgDeleteFileRecord    ) returns (MsgDeleteFileRecordResponse    );
  rpc CreateFilePermission (MsgCreateFilePermission) returns (MsgCreateFilePermissionResponse);
  rpc UpdateFilePermission (MsgUpdateFilePermission) returns (MsgUpdateFilePermissionResponse);
  rpc DeleteFilePermission (MsgDeleteFilePermission) returns (MsgDeleteFilePermissionResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                                "authority";
  option           (amino.name) = "skillchain/x/filestorage/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgCreateFileRecord {
  option (cosmos.msg.v1.signer) = "creator";
  string creator     =  1;
  string index       =  2;
  string owner       =  3;
  string filename    =  4;
  string fileHash    =  5;
  uint64 fileSize    =  6;
  string contentType =  7;
  uint64 uploadDate  =  8;
  string ipfsHash    =  9;
  string metadata    = 10;
  bool   isPublic    = 11;
}

message MsgCreateFileRecordResponse {}

message MsgUpdateFileRecord {
  option (cosmos.msg.v1.signer) = "creator";
  string creator     =  1;
  string index       =  2;
  string owner       =  3;
  string filename    =  4;
  string fileHash    =  5;
  uint64 fileSize    =  6;
  string contentType =  7;
  uint64 uploadDate  =  8;
  string ipfsHash    =  9;
  string metadata    = 10;
  bool   isPublic    = 11;
}

message MsgUpdateFileRecordResponse {}

message MsgDeleteFileRecord {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string index   = 2;
}

message MsgDeleteFileRecordResponse {}

message MsgCreateFilePermission {
  option (cosmos.msg.v1.signer) = "creator";
  string creator         = 1;
  string index           = 2;
  string fileId          = 3;
  string userAddress     = 4;
  string permissionLevel = 5;
  string grantedBy       = 6;
  uint64 grantedAt       = 7;
  uint64 expiresAt       = 8;
}

message MsgCreateFilePermissionResponse {}

message MsgUpdateFilePermission {
  option (cosmos.msg.v1.signer) = "creator";
  string creator         = 1;
  string index           = 2;
  string fileId          = 3;
  string userAddress     = 4;
  string permissionLevel = 5;
  string grantedBy       = 6;
  uint64 grantedAt       = 7;
  uint64 expiresAt       = 8;
}

message MsgUpdateFilePermissionResponse {}

message MsgDeleteFilePermission {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string index   = 2;
}

message MsgDeleteFilePermissionResponse {}

